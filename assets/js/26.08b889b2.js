(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{519:function(s,a,t){s.exports=t.p+"assets/img/proxy-solve.3ab8a833.png"},559:function(s,a,t){"use strict";t.r(a);var e=t(3),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),e("h4",{attrs:{id:"本篇文章主要讲了跨域和解决跨域的方法及原理。一起学习下吧。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本篇文章主要讲了跨域和解决跨域的方法及原理。一起学习下吧。"}},[s._v("#")]),s._v(" 本篇文章主要讲了跨域和解决跨域的方法及原理。一起学习下吧。")])]),e("h2",{attrs:{id:"什么是跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域"}},[s._v("#")]),s._v(" 什么是跨域？")]),s._v(" "),e("h4",{attrs:{id:"跨域是什么要从两个方面来讲-什么情况下会出现跨域-还有跨域的出现是为了什么。跨域的出现是因为违反了同源策略-什么是同源策略-same-origin-policy-一句话概括就是"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域是什么要从两个方面来讲-什么情况下会出现跨域-还有跨域的出现是为了什么。跨域的出现是因为违反了同源策略-什么是同源策略-same-origin-policy-一句话概括就是"}},[s._v("#")]),s._v(" 跨域是什么要从两个方面来讲，什么情况下会出现跨域，还有跨域的出现是为了什么。跨域的出现是因为违反了同源策略，什么是同源策略(same-origin policy)，一句话概括就是：")]),s._v(" "),e("blockquote",[e("p",[s._v("两个地址的协议，域名和端口号三者相同即为同源。利用这个规则来确定两个地址之间的关系。")])]),s._v(" "),e("h4",{attrs:{id:"跨域出现的目的-实际上也就是为什么要制定同源策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域出现的目的-实际上也就是为什么要制定同源策略"}},[s._v("#")]),s._v(" 跨域出现的目的，实际上也就是为什么要制定同源策略；")]),s._v(" "),e("h4",{attrs:{id:"利用同源策略-可以判断出两个地址之间的关系-对不同源也就是跨域做一些限制。主要是这三种限制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#利用同源策略-可以判断出两个地址之间的关系-对不同源也就是跨域做一些限制。主要是这三种限制"}},[s._v("#")]),s._v(" 利用同源策略，可以判断出两个地址之间的关系，对不同源也就是跨域做一些限制。主要是这三种限制：")]),s._v(" "),e("p",[s._v("1.Cookie、LocalStorage和IndexDB无法读取；"),e("br"),s._v("\n2.相互间的DOM无法获取；"),e("br"),s._v("\n3.XHR请求无法接收响应。")]),s._v(" "),e("h4",{attrs:{id:"假设-我们没有这些限制-别人可以利用一些手段拿到用户信息-或者攻击一些被内嵌的页面用以修改它的宿主页面-再或者去获取一些敏感信息。这些都是很危险的。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#假设-我们没有这些限制-别人可以利用一些手段拿到用户信息-或者攻击一些被内嵌的页面用以修改它的宿主页面-再或者去获取一些敏感信息。这些都是很危险的。"}},[s._v("#")]),s._v(" 假设，我们没有这些限制，别人可以利用一些手段拿到用户信息，或者攻击一些被内嵌的页面用以修改它的宿主页面，再或者去获取一些敏感信息。这些都是很危险的。")]),s._v(" "),e("h4",{attrs:{id:"游览器爸爸搞了这么一出-一定程度上为我们营造了相对安全的环境。-但是有些场景下-我们不得不去跨域做一些事-比如后端服务托管在另一个域名-或者有时候对接一些第三方的api-通过内嵌页面通知宿主页面一些信息等等。因此我们需要用一些办法实现消息互通。-不过值得一提的事-img、link和script是可以跨域加载的-form表单提交也不会被限制。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#游览器爸爸搞了这么一出-一定程度上为我们营造了相对安全的环境。-但是有些场景下-我们不得不去跨域做一些事-比如后端服务托管在另一个域名-或者有时候对接一些第三方的api-通过内嵌页面通知宿主页面一些信息等等。因此我们需要用一些办法实现消息互通。-不过值得一提的事-img、link和script是可以跨域加载的-form表单提交也不会被限制。"}},[s._v("#")]),s._v(" 游览器爸爸搞了这么一出，一定程度上为我们营造了相对安全的环境。 但是有些场景下，我们不得不去跨域做一些事，比如后端服务托管在另一个域名，或者有时候对接一些第三方的API，通过内嵌页面通知宿主页面一些信息等等。因此我们需要用一些办法实现消息互通。  不过值得一提的事，img、link和script是可以跨域加载的，form表单提交也不会被限制。")]),s._v(" "),e("h4",{attrs:{id:"下面学习几种跨域的解决方法。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下面学习几种跨域的解决方法。"}},[s._v("#")]),s._v(" 下面学习几种跨域的解决方法。")]),s._v(" "),e("h3",{attrs:{id:"jsonp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[s._v("#")]),s._v(" JSONP")]),s._v(" "),e("h4",{attrs:{id:"首当其冲jsonp-简单写一个demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#首当其冲jsonp-简单写一个demo"}},[s._v("#")]),s._v(" 首当其冲JSONP，简单写一个demo：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 前端代码 \nfunction jsonp({url, params, callback}) {\n  return new Promise((resolve, reject) => {\n    let script = document.createElement('script');\n    window[callback] = function(data) {\n      // 只有最终触发了callback才会触发then，然后删除添加的脚本\n      resolve(data);\n      document.body.removeChild(script);\n    }\n\n    // JSONP的特点是使用GET请求，包括函数名称最终也要以url参数传递\n    params = {...params, callback};\n    let paramsArr = [];\n    for(let key in params) {\n      paramsArr.push(`${key}=${params[key]}`);\n    }\n\n    script.src = `${url}?${paramsArr.join('&')}`;\n    document.body.appendChild(script);\n  });\n}\n\n\njsonp({\n  url: 'http://localhost:3000/say',\n  params: {text: 'Hi~'},\n  callback: 'show' // 每次调用callback函数的名不可相同，否则会出现没有script可删除\n}).then((data) => {\n  console.log(data);\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 利用node的express实现的服务\nconst express = require('express');\nconst app = express();\nconst portNumber = '3000';\n\napp.get('/say', function (req, res) {\n  const { text, callback } = req.query;\n  res.end(`${callback}('Hello')`)\n});\n\napp.listen(3000);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("h4",{attrs:{id:"仔细看看-jsonp方法里面做了些啥-它每次执行就给window加了个方法-然后利用script标签能够跨域加载资源的特性-把参数给拼接起来进行请求。服务端又把请求传递的callback参数的调用传了回来-然后还塞了个数据进去。传回来后-script标签的特性就是执行上下文啊-遂执行方法调用触发回调。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#仔细看看-jsonp方法里面做了些啥-它每次执行就给window加了个方法-然后利用script标签能够跨域加载资源的特性-把参数给拼接起来进行请求。服务端又把请求传递的callback参数的调用传了回来-然后还塞了个数据进去。传回来后-script标签的特性就是执行上下文啊-遂执行方法调用触发回调。"}},[s._v("#")]),s._v(" 仔细看看，JSONP方法里面做了些啥，它每次执行就给window加了个方法，然后利用script标签能够跨域加载资源的特性，把参数给拼接起来进行请求。服务端又把请求传递的callback参数的调用传了回来，然后还塞了个数据进去。传回来后，script标签的特性就是执行上下文啊，遂执行方法调用触发回调。")]),s._v(" "),e("h4",{attrs:{id:"原理就是利用script可以进行跨域资源请求和执行上下文的特性。但是伴随而来也有些问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理就是利用script可以进行跨域资源请求和执行上下文的特性。但是伴随而来也有些问题"}},[s._v("#")]),s._v(" 原理就是利用script可以进行跨域资源请求和执行上下文的特性。但是伴随而来也有些问题：")]),s._v(" "),e("p",[s._v("1.只能进行GET请求，加载资源嘛；"),e("br"),s._v("\n2.因为这种方式需要完全信任服务端，所以安全性也有问题，比如XSS攻击。"),e("br"),s._v("\n下一位。")]),s._v(" "),e("h3",{attrs:{id:"服务端代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务端代理"}},[s._v("#")]),s._v(" 服务端代理")]),s._v(" "),e("h4",{attrs:{id:"这个就机智些了-同源策略是游览器搞的-那我们不让游览器去找目标服务端不就好了。那找的人一定得是游览器允许得。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#这个就机智些了-同源策略是游览器搞的-那我们不让游览器去找目标服务端不就好了。那找的人一定得是游览器允许得。"}},[s._v("#")]),s._v(" 这个就机智些了， 同源策略是游览器搞的，那我们不让游览器去找目标服务端不就好了。那找的人一定得是游览器允许得。")]),s._v(" "),e("p",[e("img",{attrs:{src:t(519),alt:"proxy-solve.png"}})]),s._v(" "),e("h4",{attrs:{id:"基本上就是上面一个流程-可以利用一个能跨域得服务器或者nginx配置反向代理也行-按照这个套路-去实现跨域请求。这个方法就是通过同源策略不会对服务端请求做限制实现的。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本上就是上面一个流程-可以利用一个能跨域得服务器或者nginx配置反向代理也行-按照这个套路-去实现跨域请求。这个方法就是通过同源策略不会对服务端请求做限制实现的。"}},[s._v("#")]),s._v(" 基本上就是上面一个流程，可以利用一个能跨域得服务器或者nginx配置反向代理也行，按照这个套路，去实现跨域请求。这个方法就是通过同源策略不会对服务端请求做限制实现的。")]),s._v(" "),e("h3",{attrs:{id:"websocket"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[s._v("#")]),s._v(" WebSocket")]),s._v(" "),e("h4",{attrs:{id:"websocket是一种通信协议-在网络通信协议那一篇讲过-它的目的是实现游览器和服务端的双全工通信-作为一项还算新的技术-它还有一个特点就是可以跨域。这一点服务端的代码便些应该有这个意识去校验。-看一个简单的例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket是一种通信协议-在网络通信协议那一篇讲过-它的目的是实现游览器和服务端的双全工通信-作为一项还算新的技术-它还有一个特点就是可以跨域。这一点服务端的代码便些应该有这个意识去校验。-看一个简单的例子"}},[s._v("#")]),s._v(" WebSocket是一种通信协议，在网络通信协议那一篇讲过，它的目的是实现游览器和服务端的双全工通信，作为一项还算新的技术，它还有一个特点就是可以跨域。这一点服务端的代码便些应该有这个意识去校验。  看一个简单的例子：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//前端代码 \nconst socket = new WebSocket('ws://localhost:8888');\nsocket.onopen = () => {\n  socket.send('Hi server');\n}\nsocket.onmessage = (e) => {\n  console.log(e.data);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 服务端代码\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8888 });\nwss.on('connection', (ws) => {\n  ws.on('message', (data) => {\n    console.log(data);\n    ws.send('Hello~ client');\n  })\n});\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h4",{attrs:{id:"看起来是不是也很简单-不过我想websocket的目的本身并不是这个-如果不是为了server-push-还是没必要用。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#看起来是不是也很简单-不过我想websocket的目的本身并不是这个-如果不是为了server-push-还是没必要用。"}},[s._v("#")]),s._v(" 看起来是不是也很简单， 不过我想WebSocket的目的本身并不是这个，如果不是为了Server push,还是没必要用。")]),s._v(" "),e("h3",{attrs:{id:"cors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[s._v("#")]),s._v(" CORS")]),s._v(" "),e("h4",{attrs:{id:"cors-cross-origin-resource-sharing-跨源资源共享-这个东西可以根本解决跨域问题。它是w3c标准-使用它来解决跨域请求对于前端开发无感知-因为该做的事-游览器爸爸都帮忙做了-关键点在于服务端需要实现cors接口-用于给游览器做校验。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cors-cross-origin-resource-sharing-跨源资源共享-这个东西可以根本解决跨域问题。它是w3c标准-使用它来解决跨域请求对于前端开发无感知-因为该做的事-游览器爸爸都帮忙做了-关键点在于服务端需要实现cors接口-用于给游览器做校验。"}},[s._v("#")]),s._v(" CORS(Cross-Origin Resource Sharing)跨源资源共享，这个东西可以根本解决跨域问题。它是W3C标准，使用它来解决跨域请求对于前端开发无感知，因为该做的事，游览器爸爸都帮忙做了，关键点在于服务端需要实现CORS接口，用于给游览器做校验。")]),s._v(" "),e("h4",{attrs:{id:"为了搞清楚原理-我们来理一理-游览器做了哪些事情。游览器将cors请求分为两类-简单请求和复杂请求。先看一下区分条件-简单请求的条件是"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为了搞清楚原理-我们来理一理-游览器做了哪些事情。游览器将cors请求分为两类-简单请求和复杂请求。先看一下区分条件-简单请求的条件是"}},[s._v("#")]),s._v(" 为了搞清楚原理，我们来理一理，游览器做了哪些事情。游览器将CORS请求分为两类：简单请求和复杂请求。先看一下区分条件，简单请求的条件是：")]),s._v(" "),e("p",[s._v("1.请求方法必须是GET、POST或者HEAD；"),e("br"),s._v("\n2.HTTP的头信息不超出一下几种字段：")]),s._v(" "),e("ul",[e("li",[s._v("Accept")]),s._v(" "),e("li",[s._v("Accept-Language")]),s._v(" "),e("li",[s._v("Content-Language")]),s._v(" "),e("li",[s._v("Last-Event-ID")]),s._v(" "),e("li",[s._v("Content-Type： 只 限 于 三 个 值 applicatio/x-www-form-urlencoded、multipart/form-data、text/plain")])]),s._v(" "),e("h4",{attrs:{id:"不能同时满足上面两个条件的就是复杂请求。为什么搞这么复杂呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不能同时满足上面两个条件的就是复杂请求。为什么搞这么复杂呢"}},[s._v("#")]),s._v(" 不能同时满足上面两个条件的就是复杂请求。为什么搞这么复杂呢？")]),s._v(" "),e("h4",{attrs:{id:"其实简单请求和复杂请求的定义就是简单请求都是form标签在不依赖脚本的情况下可以发出的请求-如果一旦使用的事form标签本身无法实现的请求方法、自定义请求头或者编码方式会就变成复杂请求。而为什么form标签独特对待-是因为在sop-即同源策略-出现之前-form标签就已经出现了-并且form提交后-原页面是无法获取相应的。因此-没必要对form的提交进行额外的处理。同时-xhr发起的请求目的也有可能会类似于form请求的操作-只是提交-并不在意响应数据。考虑到一些原因-把xhr的类似操作也列为了简单请求。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其实简单请求和复杂请求的定义就是简单请求都是form标签在不依赖脚本的情况下可以发出的请求-如果一旦使用的事form标签本身无法实现的请求方法、自定义请求头或者编码方式会就变成复杂请求。而为什么form标签独特对待-是因为在sop-即同源策略-出现之前-form标签就已经出现了-并且form提交后-原页面是无法获取相应的。因此-没必要对form的提交进行额外的处理。同时-xhr发起的请求目的也有可能会类似于form请求的操作-只是提交-并不在意响应数据。考虑到一些原因-把xhr的类似操作也列为了简单请求。"}},[s._v("#")]),s._v(" 其实简单请求和复杂请求的定义就是简单请求都是form标签在不依赖脚本的情况下可以发出的请求，如果一旦使用的事form标签本身无法实现的请求方法、自定义请求头或者编码方式会就变成复杂请求。而为什么form标签独特对待，是因为在SOP(即同源策略)出现之前，form标签就已经出现了，并且form提交后，原页面是无法获取相应的。因此，没必要对form的提交进行额外的处理。同时，XHR发起的请求目的也有可能会类似于form请求的操作，只是提交，并不在意响应数据。考虑到一些原因，把XHR的类似操作也列为了简单请求。")]),s._v(" "),e("h4",{attrs:{id:"那么简单请求和复杂请求对于游览器做cors有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#那么简单请求和复杂请求对于游览器做cors有什么区别"}},[s._v("#")]),s._v(" 那么简单请求和复杂请求对于游览器做CORS有什么区别？")]),s._v(" "),e("h4",{attrs:{id:"针对复杂请求-会有preflight机制-也就是-预检-请求。游览器在发起正式的xmlhttprequest请求之前-先发一次options请求过去-问问服务端-这个域名在不在你的许可名单里面-再确定一下请求方法和请求头允不允许。当确定都ok-再发起正式的xmlhttprequest请求。对应的简单请求就没这些事了-直接请求发过去-带上一个页面的域名做origin头信息-服务端判断允不允许跨域后返回对应报头就好了。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#针对复杂请求-会有preflight机制-也就是-预检-请求。游览器在发起正式的xmlhttprequest请求之前-先发一次options请求过去-问问服务端-这个域名在不在你的许可名单里面-再确定一下请求方法和请求头允不允许。当确定都ok-再发起正式的xmlhttprequest请求。对应的简单请求就没这些事了-直接请求发过去-带上一个页面的域名做origin头信息-服务端判断允不允许跨域后返回对应报头就好了。"}},[s._v("#")]),s._v(" 针对复杂请求，会有preflight机制，也就是“预检”请求。游览器在发起正式的XMLHttpRequest请求之前，先发一次OPTIONS请求过去，问问服务端，这个域名在不在你的许可名单里面，再确定一下请求方法和请求头允不允许。当确定都ok，再发起正式的XMLHttpRequest请求。对应的简单请求就没这些事了，直接请求发过去，带上一个页面的域名做Origin头信息，服务端判断允不允许跨域后返回对应报头就好了。")]),s._v(" "),e("h4",{attrs:{id:"这里贴一下服务端的一个配置以说明一些报头的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#这里贴一下服务端的一个配置以说明一些报头的作用"}},[s._v("#")]),s._v(" 这里贴一下服务端的一个配置以说明一些报头的作用：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const express = require('express');\nconst app = express();\n// 白名单列表，对于这些地址来的请求，允许跨域\nconst whiteList = ['http://localhost:3000'];\napp.use((req, res, next) => {\n  // 拿到请求的源\n  const { origin } = req.headers;\n  if (whiteList.includes(origin)) {\n    // 设置允许访问的额源\n    res.setHeader('Access-Control-Allow-Origin', origin);\n    // 设置允许的方法\n    res.setHeader('Access-Control-Allow-Methods', 'PUT');\n    // 设置允许添加的请求头\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n    // 允许携带cookie\n    res.setHeader('Access-Control-Allow-Credentials', true);\n    // 预检的存活时间\n    res.setHeader('Access-Control-Max-Age', 6);\n    // 允许返回的头\n    // res.setHeader('Access-Control-Expose-Headers', 'Text')\n    if (req.method === 'OPTIONS') {\n      // OPTIONS请求不做处理\n      res.end();\n    }\n  }\n  next();\n});\n\napp.put('/getData', (req, res) => {\n  res.end('PUT method data');  \n});\n\napp.get('/getData', (req, res) => {\n  res.end('GET method data');  \n});\n\napp.listen(4000);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br")])]),e("h4",{attrs:{id:"上面的access-control-allow-origin报头如果值为-则表示允许所有-也是返回必定包含的报头。这个方法真的是为跨域请求量身打造。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#上面的access-control-allow-origin报头如果值为-则表示允许所有-也是返回必定包含的报头。这个方法真的是为跨域请求量身打造。"}},[s._v("#")]),s._v(" 上面的Access-Control-Allow-Origin报头如果值为*则表示允许所有，也是返回必定包含的报头。这个方法真的是为跨域请求量身打造。")]),s._v(" "),e("h3",{attrs:{id:"postmessage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#postmessage"}},[s._v("#")]),s._v(" postMessage")]),s._v(" "),e("h4",{attrs:{id:"postmessage看名字就知道是发信息用的。具体方法可以看看mdn-它的作用就是解决窗口之间的通信-可以式新窗口也可以是嵌套的iframe。看个例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#postmessage看名字就知道是发信息用的。具体方法可以看看mdn-它的作用就是解决窗口之间的通信-可以式新窗口也可以是嵌套的iframe。看个例子"}},[s._v("#")]),s._v(" postMessage看名字就知道是发信息用的。具体方法可以看看MDN，它的作用就是解决窗口之间的通信，可以式新窗口也可以是嵌套的iframe。看个例子：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\x3c!-- 主页面 --\x3e\n<body>\n  <iframe src=\"http://localhost:4000/iframe.html\" id=\"iframe-ele\" onload=\"load()\"></iframe>\n  <script>\n    // 和跨域iframe利用postMessage通信，跨域页面可以请求对应信息返回过来\n    function load() {\n      const iframeEle = document.querySelector('#iframe-ele');\n      iframeEle.contentWindow.postMessage('Hi', 'http://localhost:4000');\n      window.onmessage = (e) => {\n        console.log('index msg:', e.data);\n      }\n    }\n  <\/script>\n</body>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\x3c!-- 被嵌套页面 http://localhost:4000/iframe.html--\x3e\n<body>\n  <script>\n    window.onmessage = (e) => {\n      e.source.postMessage('Hello', e.origin);\n    }  \n  <\/script>\n</body>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h4",{attrs:{id:"这里两边两个窗口就通信了-那假设目标通信页面请求自己同源的服务器再把结果给宿主页面呢-那不就可以完成跨域请求了。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#这里两边两个窗口就通信了-那假设目标通信页面请求自己同源的服务器再把结果给宿主页面呢-那不就可以完成跨域请求了。"}},[s._v("#")]),s._v(" 这里两边两个窗口就通信了，那假设目标通信页面请求自己同源的服务器再把结果给宿主页面呢？那不就可以完成跨域请求了。")]),s._v(" "),e("h3",{attrs:{id:"location-hash-iframe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#location-hash-iframe"}},[s._v("#")]),s._v(" location.hash + iframe")]),s._v(" "),e("h4",{attrs:{id:"这个操作-大概是这么个流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#这个操作-大概是这么个流程"}},[s._v("#")]),s._v(" 这个操作，大概是这么个流程：")]),s._v(" "),e("p",[s._v("1.假设http://localhost:3000/a 页面想和http://lacalhost:4000/c页面通信，那么可以在a页面中内嵌c页面，然后给他设置一个url hash；"),e("br"),s._v("\n2.c页面可以加载一个和a页面同源的子页面http://localhost:3000/b，并把相传给a页面的内容作为b页面的url hash；"),e("br"),s._v("\n3.b页面用window.parent.parent获取到同源的a页面，把当前的hash设置给a页面；"),e("br"),s._v("\n4.a页面监听hashchange事件就拿到了c页面传递的值。")]),s._v(" "),e("h3",{attrs:{id:"window-name-iframe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#window-name-iframe"}},[s._v("#")]),s._v(" window.name + iframe")]),s._v(" "),e("h4",{attrs:{id:"window-name实现不同域名页面的通信是利用了只要是在一个窗口-前一个页面设置了window-name属性-后一个页面就能读取到设置的值。这里同样讲一下思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#window-name实现不同域名页面的通信是利用了只要是在一个窗口-前一个页面设置了window-name属性-后一个页面就能读取到设置的值。这里同样讲一下思路"}},[s._v("#")]),s._v(" window.name实现不同域名页面的通信是利用了只要是在一个窗口，前一个页面设置了window.name属性，后一个页面就能读取到设置的值。这里同样讲一下思路：")]),s._v(" "),e("p",[s._v("1.假设http://localhost:3000/a页面想和http://localhost:4000/c页面通信，那么可以在a页面中使用iframe内嵌c页面；"),e("br"),s._v("\n2.c页面修改自己窗口的window.name为想要传递给a页面的值，加载完成触发a页面的iframe的onload事件；"),e("br"),s._v("\n3.a页面把属于c页面iframe的src属性修改为同源的http://localhost:3000/b；"),e("br"),s._v("\n4.加载完同源的b页面，再次触发onload事件，抓取同源子页面的window.name信息，即iframe.contentWindow.name。")]),s._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),e("h4",{attrs:{id:"总的来说-同源策略的限制是游览器安全的一个基础环节-不能说有了它就绝对安全-毕竟没有决对安全。但是有了它至少提高了坏人的成本。上面的方法中-最常用到的还是cors和中间代理。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总的来说-同源策略的限制是游览器安全的一个基础环节-不能说有了它就绝对安全-毕竟没有决对安全。但是有了它至少提高了坏人的成本。上面的方法中-最常用到的还是cors和中间代理。"}},[s._v("#")]),s._v(" 总的来说，同源策略的限制是游览器安全的一个基础环节，不能说有了它就绝对安全，毕竟没有决对安全。但是有了它至少提高了坏人的成本。上面的方法中，最常用到的还是CORS和中间代理。")]),s._v(" "),e("h4",{attrs:{id:"参考相关文章链接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考相关文章链接"}},[s._v("#")]),s._v(" 参考相关文章链接：")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://www.yuguomin.com/2019/12/25/frontend-network-study/",target:"_blank",rel:"noopener noreferrer"}},[s._v("SuperFish's Blog"),e("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);