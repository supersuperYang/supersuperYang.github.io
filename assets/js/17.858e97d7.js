(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{520:function(s,a,e){s.exports=e.p+"assets/img/easy-selector-tree.1ae58775.png"},557:function(s,a,e){"use strict";e.r(a);var n=e(3),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"title"}),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),n("h4",{attrs:{id:"本篇内容主要是css语言相关的学习-分为语法的整体结构规则、选择器及css中的单位学习。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本篇内容主要是css语言相关的学习-分为语法的整体结构规则、选择器及css中的单位学习。"}},[s._v("#")]),s._v(" 本篇内容主要是CSS语言相关的学习，分为语法的整体结构规则、选择器及CSS中的单位学习。")]),s._v(" "),n("h4",{attrs:{id:"在前面将css的学习内容划分为语言部分和功能部分。首先-我们从整体的语法结构开始-到细节的选择器的使用-再细化到计量单位的不同。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在前面将css的学习内容划分为语言部分和功能部分。首先-我们从整体的语法结构开始-到细节的选择器的使用-再细化到计量单位的不同。"}},[s._v("#")]),s._v(" 在前面将CSS的学习内容划分为语言部分和功能部分。首先，我们从整体的语法结构开始，到细节的选择器的使用，再细化到计量单位的不同。")])]),n("h2",{attrs:{id:"css语法结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#css语法结构"}},[s._v("#")]),s._v(" CSS语法结构")]),s._v(" "),n("h4",{attrs:{id:"我们每天都会和css打交道-写过很多css样式文件-里面的内容是这样的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#我们每天都会和css打交道-写过很多css样式文件-里面的内容是这样的"}},[s._v("#")]),s._v(" 我们每天都会和CSS打交道，写过很多CSS样式文件，里面的内容是这样的：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(".head {\n  font-weight: bold;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h4",{attrs:{id:"这种写法就是qualified-rule-也就是普通规则。还有一种使用频率低一些的规则就是at-rule-由一个-关键字和后续的一个区块组成-如果没有区块-则以分号结束。例如"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#这种写法就是qualified-rule-也就是普通规则。还有一种使用频率低一些的规则就是at-rule-由一个-关键字和后续的一个区块组成-如果没有区块-则以分号结束。例如"}},[s._v("#")]),s._v(" 这种写法就是qualified rule，也就是普通规则。还有一种使用频率低一些的规则就是at-rule，由一个@关键字和后续的一个区块组成，如果没有区块，则以分号结束。例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@import "mystyle.css";\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h4",{attrs:{id:"这两种规则构建了一个css文件的基本语法机构-在不考虑注释等无效信息-一个样式表只会包含这两种结构信息。接下来-我们先看一下使用较少的at-rule。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#这两种规则构建了一个css文件的基本语法机构-在不考虑注释等无效信息-一个样式表只会包含这两种结构信息。接下来-我们先看一下使用较少的at-rule。"}},[s._v("#")]),s._v(" 这两种规则构建了一个CSS文件的基本语法机构，在不考虑注释等无效信息，一个样式表只会包含这两种结构信息。接下来，我们先看一下使用较少的at-rule。")]),s._v(" "),n("h3",{attrs:{id:"at-rule"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#at-rule"}},[s._v("#")]),s._v(" at-rule")]),s._v(" "),n("h4",{attrs:{id:"at-rule的数量不是特别多-主要有下面这些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#at-rule的数量不是特别多-主要有下面这些"}},[s._v("#")]),s._v(" at-rule的数量不是特别多，主要有下面这些：")]),s._v(" "),n("p",[s._v("1.@charset\n用于定义CSS文件使用的字符编码方式，使用时必须出现在文件的顶部（最前面），这个规则只在给出语法解析阶段前使用，并不影响页面上的展示效果。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@charset "utf-8";\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("2.@import\n用于引入一个CSS文件，这个使用频率就很高了，除了@charset规则不会被引入，@import可以引入另一个文件的全部内容。实际上线的时候，不建议使用，多请求、阻塞加载之类。本地用于模块化开发可以，然后使用一些工具如(grunt)工具进行压缩并合并。@import语句也只能在CSS文件顶部，否则顺序的不同会导致一些意想不到的结果。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@import "mystyle.css";\n@import url("mystyle.css");\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("3.media\n就是media query(媒体查询)使用的规则了，也很常用，它能够对设备的类型进行一些判断，响应式宽度，retina屏幕判断，打印屏幕等，甚至IE7，IE8游览器的hack。在media的区块内，是普通规则表。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@media all and (min-width: 750px) {\n    /* 宽度大于750时的样式... */\n}\n\n@media print {\n    /* 打印的时候的样式 */ \n}\n\n@media \\0screen\\,screen\\9 {\n    /* IE7,IE8的特定样式 */ \n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("4.@page\n这个规则用于分页媒体访问网页时的表现设置，比如打印文档时候修改一些CSS属性。使用@page我们只能改变部分CSS属性，例如间距属性margin，打印相关的orphans，widows，以及page-break-*，其它CSS属性会被忽略。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@page :first {\n  margin: 1in;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("5.@counter-style\n产生一种数据，用于定义列表项的表现。看一下它的使用：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@counter-style triangle {\n  system: cyclic;\n  symbols: ‣;\n  suffix: " ";\n}\n\n.items {\n   list-style: circled-alpha;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("6.@keyframes\n它也是产生一种数据，用于定义动画关键帧：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n.box {\n   animation: 1s linear fadeIn;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("7.@font-face\n用于定义一种字体，IE6也支持。icon font技术就是利用这个特性来实现的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@font-face {\n  font-family: Gentium;\n  src: url(http://example.com/fonts/Gentium.woff);\n}\n\np { font-family: Gentium, serif; }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("8.@supports\n用来检测游览器是否支持某CSS属性声明，当作hack使用。既然检查别人，那自己也不能差了，除了IE系列，基本都支持。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/* 检查是否支持CSS声明flex */ \n@supports (display: flex) {\n  .module { display: flex; }\n}\n\n/* 检查多个条件 */ \n@supports (display: flex) and (-webkit-appearance: checkbox) {\n  .module { display: flex; }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("9.@namespace\n此规则应用到XML HTML(XHTML)上特别有用，因为这样的话XHTML元素可以作为选择器在CSS中使用。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/* XHTML命名空间 */\n@namespace url(http://www.w3.org/1999/xhtml);\n\n/* 内嵌在XHTML的SVG的命名空间 */\n@namespace svg url(http://www.w3.org/2000/svg);\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("10.@viewport\n用于设置视口的一些特性，不过兼容性目前不是很好，多数时候被HTML的meta代替。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@viewport {\n  width: 100vw; /*将视口宽度设为与设备宽度相同*/\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("11.@document\n这个规则现在还在讨论中，CSS 4.0规范有相关说明。如果文档满足给定的一些条件，就可以应用我们指定的一些样式。比如一个CSS文件被多个网站调用，可以通过域名匹配来执行不同的CSS样式，有效避免冲突，或者防止外链之类的。目前这个规则支持性很差。")]),s._v(" "),n("h3",{attrs:{id:"qualified-rule"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#qualified-rule"}},[s._v("#")]),s._v(" qualified rule")]),s._v(" "),n("h4",{attrs:{id:"接下来是普通规则-普通规则主要由选择器和声明区块构成-声明区块又由属性和值构成。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接下来是普通规则-普通规则主要由选择器和声明区块构成-声明区块又由属性和值构成。"}},[s._v("#")]),s._v(" 接下来是普通规则，普通规则主要由选择器和声明区块构成，声明区块又由属性和值构成。")]),s._v(" "),n("ul",[n("li",[s._v("普通规则\n"),n("ul",[n("li",[s._v("选择器")]),s._v(" "),n("li",[s._v("声明区块\n"),n("ul",[n("li",[s._v("属性")]),s._v(" "),n("li",[s._v("值\n"),n("ul",[n("li",[s._v("值得类型")]),s._v(" "),n("li",[s._v("函数")])])])])])])])]),s._v(" "),n("h4",{attrs:{id:"选择器得内容在接下来得部分会专门整理-我们这里看一下声明区块-声明部分是一个由-属性-值-组成得序列。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#选择器得内容在接下来得部分会专门整理-我们这里看一下声明区块-声明部分是一个由-属性-值-组成得序列。"}},[s._v("#")]),s._v(" 选择器得内容在接下来得部分会专门整理，我们这里看一下声明区块，声明部分是一个由“属性：值”组成得序列。")]),s._v(" "),n("h4",{attrs:{id:"属性是由中划线、下划线、字母等组成得标识符-css还支持使用反斜杠定义。属性不允许使用连续得两个中划线开头-这样得属性会被认为是css变量。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性是由中划线、下划线、字母等组成得标识符-css还支持使用反斜杠定义。属性不允许使用连续得两个中划线开头-这样得属性会被认为是css变量。"}},[s._v("#")]),s._v(" 属性是由中划线、下划线、字母等组成得标识符，CSS还支持使用反斜杠定义。属性不允许使用连续得两个中划线开头，这样得属性会被认为是CSS变量。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(":root {\n  --main-color: #06c;\n  --accent-color: #006;\n}\n/* The rest of the CSS file */\n#foo h1 {\n  color: var(--main-color);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h4",{attrs:{id:"值得部分-是根据不同得属性可以去不同得值-可能是字符串-标识符。css属性值可能是以下类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#值得部分-是根据不同得属性可以去不同得值-可能是字符串-标识符。css属性值可能是以下类型"}},[s._v("#")]),s._v(" 值得部分，是根据不同得属性可以去不同得值，可能是字符串，标识符。CSS属性值可能是以下类型：")]),s._v(" "),n("ul",[n("li",[s._v("CSS范围得关键字： initial， unset， inherit， 任何属性都可以得关键字。")]),s._v(" "),n("li",[s._v("字符串： 比如content属性。")]),s._v(" "),n("li",[s._v("URL： 使用url()函数得URL值。")]),s._v(" "),n("li",[s._v("整数/实数： 比如flex属性。")]),s._v(" "),n("li",[s._v("维度： 单位得整数/实数，比如width属性。")]),s._v(" "),n("li",[s._v("百分比： 大部分维度都支持。")]),s._v(" "),n("li",[s._v("颜色： 比如background-color属性。")]),s._v(" "),n("li",[s._v("图片： 比如background-image属性。")]),s._v(" "),n("li",[s._v("2D位置：比如background-position属性。")]),s._v(" "),n("li",[s._v("函数： 来自函数得值，比如transform属性。")])]),s._v(" "),n("h4",{attrs:{id:"有些属性会要求产生函数类型得值-比如easing-function会要求cubic-bezier-函数得值。css支持一批特定得己算型函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有些属性会要求产生函数类型得值-比如easing-function会要求cubic-bezier-函数得值。css支持一批特定得己算型函数"}},[s._v("#")]),s._v(" 有些属性会要求产生函数类型得值，比如easing-function会要求cubic-bezier()函数得值。CSS支持一批特定得己算型函数：")]),s._v(" "),n("ul",[n("li",[s._v("calc()")]),s._v(" "),n("li",[s._v("max()")]),s._v(" "),n("li",[s._v("min()")]),s._v(" "),n("li",[s._v("clamp()")]),s._v(" "),n("li",[s._v("toggle()")]),s._v(" "),n("li",[s._v("attr()")])]),s._v(" "),n("h4",{attrs:{id:"calc-函数是基本表达式计算-它支持加减乘除四则运算。在针对维度进行计算时-calc-函数允许不同单位混合运算-这非常得有用。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#calc-函数是基本表达式计算-它支持加减乘除四则运算。在针对维度进行计算时-calc-函数允许不同单位混合运算-这非常得有用。"}},[s._v("#")]),s._v(" calc()函数是基本表达式计算，它支持加减乘除四则运算。在针对维度进行计算时，calc()函数允许不同单位混合运算，这非常得有用。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("section {\n  float: left;\n  margin: 1em; border: solid 1px;\n  width: calc(100%/3 - 2*1em - 2*1px);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h4",{attrs:{id:"max-、min-和clamp-则是一些比较大小得函数-max-表示取两数中较大得一个-min-表示取两数之间较小得一个-clamp-则是给一个值限定一个范围-超出范围外则使用范围得最大或者最小值。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#max-、min-和clamp-则是一些比较大小得函数-max-表示取两数中较大得一个-min-表示取两数之间较小得一个-clamp-则是给一个值限定一个范围-超出范围外则使用范围得最大或者最小值。"}},[s._v("#")]),s._v(" max()、min()和clamp()则是一些比较大小得函数，max()表示取两数中较大得一个，min()表示取两数之间较小得一个，clamp()则是给一个值限定一个范围，超出范围外则使用范围得最大或者最小值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/*取两者中的最大值*/\n.logo {\n  width: max(50vw, 300px);\n}\n/*取两者中的最小值*/\n.logo {\n  width: min(50vw, 300px);\n}\n/* \n * 如果2.5vw大于1.5rem,那结果就是1.5rem\n * 如果2.5vw小于1rem,那结果就是1rem，其它场景下为2.5vw\n */\np {\n  font-size: clamp(1rem, 2.5vw, 1.5rem);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h4",{attrs:{id:"toggle-函数在规则选多于一个元素时生效-它会在几个值之间来回切换-比如我们要让一个列表项得样式圆点和方点间隔出现-可以使用下面代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#toggle-函数在规则选多于一个元素时生效-它会在几个值之间来回切换-比如我们要让一个列表项得样式圆点和方点间隔出现-可以使用下面代码"}},[s._v("#")]),s._v(" toggle()函数在规则选多于一个元素时生效，它会在几个值之间来回切换，比如我们要让一个列表项得样式圆点和方点间隔出现，可以使用下面代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ul { list-style-type: toggle(circle, square); }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h4",{attrs:{id:"attr-用来获取选择到得元素得某一html属性值-并用于其样式。它也可以用于伪元素-属性值采用伪元素所依附得元素。例如有如下元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attr-用来获取选择到得元素得某一html属性值-并用于其样式。它也可以用于伪元素-属性值采用伪元素所依附得元素。例如有如下元素"}},[s._v("#")]),s._v(" attr()用来获取选择到得元素得某一HTML属性值，并用于其样式。它也可以用于伪元素，属性值采用伪元素所依附得元素。例如有如下元素：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<div class="background" data-background="lime">颜色应该是粉色而不是绿色或红色因为浏览器并不支持attr()的高级用法</div>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h4",{attrs:{id:"对应得样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对应得样式"}},[s._v("#")]),s._v(" 对应得样式")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(".background {\n  background-color: pink;\n}\n.background[data-background] {\n  background-color: attr(data-background color, red);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h4",{attrs:{id:"最终颜色时粉红色-原因在元素内容里面已经给出来了。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最终颜色时粉红色-原因在元素内容里面已经给出来了。"}},[s._v("#")]),s._v(" 最终颜色时粉红色，原因在元素内容里面已经给出来了。")]),s._v(" "),n("h4",{attrs:{id:"上面得一些at规则和普通规则得属性支持性并不好-使用时需要注意游览器是否支持。可以通过can-i-use来查看。can-i-use"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#上面得一些at规则和普通规则得属性支持性并不好-使用时需要注意游览器是否支持。可以通过can-i-use来查看。can-i-use"}},[s._v("#")]),s._v(" 上面得一些at规则和普通规则得属性支持性并不好，使用时需要注意游览器是否支持。可以通过Can I use来查看。"),n("a",{attrs:{href:"https://caniuse.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Can I use"),n("OutboundLink")],1)]),s._v(" "),n("h2",{attrs:{id:"css选择器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#css选择器"}},[s._v("#")]),s._v(" CSS选择器")]),s._v(" "),n("h4",{attrs:{id:"前面讲过了声明部分-它是属性和值构成得序列-css最终是要去控制页面样式得-选择器也就是根据一些特征-选中元素树上得一批元素-然后让声明部分对它们产生影响。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前面讲过了声明部分-它是属性和值构成得序列-css最终是要去控制页面样式得-选择器也就是根据一些特征-选中元素树上得一批元素-然后让声明部分对它们产生影响。"}},[s._v("#")]),s._v(" 前面讲过了声明部分，它是属性和值构成得序列，CSS最终是要去控制页面样式得，选择器也就是根据一些特征，选中元素树上得一批元素，然后让声明部分对它们产生影响。")]),s._v(" "),n("h4",{attrs:{id:"把选择器得结构按照简单到复杂进行分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#把选择器得结构按照简单到复杂进行分类"}},[s._v("#")]),s._v(" 把选择器得结构按照简单到复杂进行分类：")]),s._v(" "),n("ul",[n("li",[s._v("简单选择器：针对某一特征判断是否选中元素。")]),s._v(" "),n("li",[s._v("复合选择器：连续写在一起得简单选择器，针对元素自身特征选择单个元素。")]),s._v(" "),n("li",[s._v("复杂选择器：由“(空格)” “>”“~”“+”“||”等符号连接的复合选择器，根据父元素或者前序元素检查单个元素。")]),s._v(" "),n("li",[s._v("选择器列表：由逗号分隔的复杂选择器，表示“或”的关系。")])]),s._v(" "),n("h4",{attrs:{id:"这个从简单到复杂也就逐级组合而成的结构-那我们从简单选择器开始。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#这个从简单到复杂也就逐级组合而成的结构-那我们从简单选择器开始。"}},[s._v("#")]),s._v(" 这个从简单到复杂也就逐级组合而成的结构，那我们从简单选择器开始。")]),s._v(" "),n("h3",{attrs:{id:"简单选择器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单选择器"}},[s._v("#")]),s._v(" 简单选择器")]),s._v(" "),n("h4",{attrs:{id:"下面是一个常用的简单选择器的分类-来自重学前端"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#下面是一个常用的简单选择器的分类-来自重学前端"}},[s._v("#")]),s._v(" 下面是一个常用的简单选择器的分类(来自重学前端)：")]),s._v(" "),n("p",[n("img",{attrs:{src:e(520),alt:"easy-selector-tree.png"}})]),s._v(" "),n("ul",[n("li",[n("p",[s._v("类型选择器和全体选择器"),n("br"),s._v("\n类型选择器，也叫标签选择器。它根据一个元素的标签名来选中元素。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  div {\n  }\n  button {\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("在实际使用中，这种操作比较影响的范围比较大，大多在格式化游览器自带样式时使用。并且我们还必须要考虑HTML或者XML元素的命名空间问题。"),n("br"),s._v("\n比如我们的svg元素，实际上在: "),n("a",{attrs:{href:"http://www.w3.org/2000/svg",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://www.w3.org/2000/svg"),n("OutboundLink")],1),s._v("命名空间之下。我们若要想区分选择svg中的a和html中的a，就必须用带命名空间的类型选择器。也就是我们之前说的@namespace。")])]),s._v(" "),n("li",[n("p",[s._v("全体选择器也就是*，可以选中任意元素。通常用来格式化样式。")])]),s._v(" "),n("li",[n("p",[s._v("id选择器与class选择器"),n("br"),s._v('\nid选择器和class选择器都是针对特定属性的选择器。id选择器时"#"号后面跟随id名，class选择器时"."后面跟随class名。')]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  #myid {\n    stroke:blue;\n    stroke-width:1;\n  }\n\n  .mycls {\n    font-size:40px\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("这两个都是和属性有关的选择器，是在属性选择器之前设计出来的，属性选择器在一定情况下可以达到他们的效果。")])]),s._v(" "),n("li",[n("p",[s._v("属性选择器"),n("br"),s._v("\n根据html元素的属性来选中元素，属性选择器有下面几种用法：\n1.[attribute] 用于选取带有指定属性的元素。"),n("br"),s._v("\n2.[attribute=value] 用于选取带有指定属性和值的元素。"),n("br"),s._v("\n3.[attribute~=value] 用于选取属性值中包含指定词汇的元素。"),n("br"),s._v("\n4.[attribute|=value] 用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。"),n("br"),s._v("\n5.[attribute^=value] 匹配属性值以指定值开头的每个元素。"),n("br"),s._v("\n6.[attribute$=value] 匹配属性值以指定值结尾的每个元素。"),n("br"),s._v("\n7.[attribute*=value] 匹配属性值中包含指定值的每个元素。"),n("br"),s._v("\n对于刚才的id选择器和class选择器就可以用它去实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('  [id="myid"] {\n    stroke:blue;\n    stroke-width:1;\n  }\n\n  [class="mycls"] {\n    font-size:40px\n  }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])])])]),s._v(" "),n("h4",{attrs:{id:"有些html属性含有特殊字符-这个时候-可以把val用引号括起来-形成一个css字符串。css字符串允许使用单双引号来规避特殊字符-也可以用反斜杠转义。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有些html属性含有特殊字符-这个时候-可以把val用引号括起来-形成一个css字符串。css字符串允许使用单双引号来规避特殊字符-也可以用反斜杠转义。"}},[s._v("#")]),s._v(" 有些HTML属性含有特殊字符，这个时候，可以把val用引号括起来，形成一个CSS字符串。CSS字符串允许使用单双引号来规避特殊字符，也可以用反斜杠转义。")]),s._v(" "),n("h3",{attrs:{id:"伪类选择器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#伪类选择器"}},[s._v("#")]),s._v(" 伪类选择器")]),s._v(" "),n("h4",{attrs:{id:"伪类选择器是一系列由css规定好的选择器-它们以冒号开头。伪类选择器有普通型和函数型两种。我们按照功能来进行分类介绍。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#伪类选择器是一系列由css规定好的选择器-它们以冒号开头。伪类选择器有普通型和函数型两种。我们按照功能来进行分类介绍。"}},[s._v("#")]),s._v(" 伪类选择器是一系列由CSS规定好的选择器，它们以冒号开头。伪类选择器有普通型和函数型两种。我们按照功能来进行分类介绍。")]),s._v(" "),n("p",[s._v("1.树结构关系伪类选择器")]),s._v(" "),n("ul",[n("li",[s._v(":root伪类匹配文档树的根元素，在选择器是针对完整的HTML文档情况，我们一般用HTMl标签即可选中根元素。但是随着scoped css和shadow root等场景出现，选择器可以针对某一子树来选择，这时候就很需要root伪类了。")]),s._v(" "),n("li",[s._v(":empty代表没有子元素的元素。子元素只可以是元素节点或文本(包括空格)。注释或处理指令都不会产生影响。")]),s._v(" "),n("li",[s._v(":nth-child是函数型的伪类，它会首先查找到所有当前元素的兄弟元素，然后按照顺序从1开始排序，选择的结果为括号中表达式(an+b)匹配到的元素集合。n会从0开始不断增加匹配。还有一些固定关键字，如odd匹配奇数个，even匹配偶数。")]),s._v(" "),n("li",[s._v(":nth-last-child，它和:nth-child的区别仅仅是从后往前数。")]),s._v(" "),n("li",[s._v(":first-child和:last-child分别表示第一个和最后一个元素。")]),s._v(" "),n("li",[s._v(":only-child匹配没有任何兄弟元素的元素即唯一一个子元素。")]),s._v(" "),n("li",[s._v(":of-type系列，比如说:nth-of-type和:nth-child的区别是:nth-of-type匹配的相同兄弟节点，而不是所有。of-type系列的nth-last-of-type、first-of-type、last-of-type、only-of-type也是如此，only-of-type是元素没有其他相同类型的兄弟元素。"),n("br"),s._v("\n2.链接与行为伪类选择器"),n("br"),s._v("\n链接与行为是第一批设计出来的伪类，也是最常用的一批。")]),s._v(" "),n("li",[s._v(":any-link表示任意的链接，包括a、area和link标签都可以匹配到这个伪类。")]),s._v(" "),n("li",[s._v(":link表示未访问过的链接。")]),s._v(" "),n("li",[s._v(":visited表示已经访问过的链接。")]),s._v(" "),n("li",[s._v(":hover表示鼠标悬停在上的元素。")]),s._v(" "),n("li",[s._v(":active表示用户正在激活这个元素，如用户按下按钮，鼠标还未抬起时，这个按钮就处于激活状态。")]),s._v(" "),n("li",[s._v(":focous表示焦点落在这个元素之上。")]),s._v(" "),n("li",[s._v(":target用于选中游览器URL的hash部分所指示的元素。")])]),s._v(" "),n("p",[s._v("3.逻辑伪类选择器\n逻辑伪类中文支持比较好的就是:not了，它的作用时匹配不符合一组选择器的元素，它有时也被称为反选伪类。选择器3级标准中，not只支持简单选择器，在选择器4级标准中，则允许not接受一个选择器列表。并且选择器中不得包含另一个否定选择符或伪元素。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/* 匹配所有非`p`元素的元素。 */\n:not(p) {\n  color: blue;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h4",{attrs:{id:"在selector-level-4草案中-还引入了-is-where-has等逻辑伪类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在selector-level-4草案中-还引入了-is-where-has等逻辑伪类"}},[s._v("#")]),s._v(" 在Selector Level 4草案中，还引入了:is :where :has等逻辑伪类")]),s._v(" "),n("h4",{attrs:{id:"还有一些草案中或者不常用的选择器-这里不多做介绍-伪类选择器是规定好的-是对选择器能力的一种补充。在实际使用中-有时候可以利用它省去很多js代码-但可能也会对于css代码的性能和可读性造成影响。具体使用与否看场景。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#还有一些草案中或者不常用的选择器-这里不多做介绍-伪类选择器是规定好的-是对选择器能力的一种补充。在实际使用中-有时候可以利用它省去很多js代码-但可能也会对于css代码的性能和可读性造成影响。具体使用与否看场景。"}},[s._v("#")]),s._v(" 还有一些草案中或者不常用的选择器，这里不多做介绍，伪类选择器是规定好的，是对选择器能力的一种补充。在实际使用中，有时候可以利用它省去很多JS代码，但可能也会对于CSS代码的性能和可读性造成影响。具体使用与否看场景。")]),s._v(" "),n("h4",{attrs:{id:"介绍完了简单选择器-我们刚刚在分类选择器的时候有4种-另外三种是复合选择器-复杂选择器和选择器列表。他们都是根据简单选择器为基本加上一些链接符组合成更高级的选择器。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍完了简单选择器-我们刚刚在分类选择器的时候有4种-另外三种是复合选择器-复杂选择器和选择器列表。他们都是根据简单选择器为基本加上一些链接符组合成更高级的选择器。"}},[s._v("#")]),s._v(" 介绍完了简单选择器，我们刚刚在分类选择器的时候有4种，另外三种是复合选择器，复杂选择器和选择器列表。他们都是根据简单选择器为基本加上一些链接符组合成更高级的选择器。")]),s._v(" "),n("p",[s._v("1.复合选择器是连写的简单选择器的组合， 针对元素自身特征选择单个元素。比如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('button.disable {\n}\n.banner[title="discounts"] {\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("2.复杂选择器则是用空格、大于号、波浪线等符号连接的复合选择器，根据父元素或者前序元素检查单个元素。比如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(".father .son {\n}\n.father > .son {\n}\n.father ~ .brother {\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("3.选择器列表是用逗号分隔的复杂选择器序列，表示“或”的关系。比如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(".father > .son,\n.father ~ .brother {\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h4",{attrs:{id:"这三种选择器看起来的层层组合关系-看起来就像数学中的四则运算符一样-那么他们肯定也有对应的组合优先级。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#这三种选择器看起来的层层组合关系-看起来就像数学中的四则运算符一样-那么他们肯定也有对应的组合优先级。"}},[s._v("#")]),s._v(" 这三种选择器看起来的层层组合关系，看起来就像数学中的四则运算符一样，那么他们肯定也有对应的组合优先级。")]),s._v(" "),n("h3",{attrs:{id:"伪元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#伪元素"}},[s._v("#")]),s._v(" 伪元素")]),s._v(" "),n("h4",{attrs:{id:"伪元素可以说是一种简单选择器-也可以说是一种机制-它和选择器很大的不同是-选择器是在结构树上或者行为上去选择元素-而伪元素选择器是把不存在的元素硬选出来。伪元素现在以双冒号开头-。由于某些早期的伪元素使用单冒号语法-现代游览器使用单冒号或双冒号语法支持早期的伪元素-以实现向后兼容。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#伪元素可以说是一种简单选择器-也可以说是一种机制-它和选择器很大的不同是-选择器是在结构树上或者行为上去选择元素-而伪元素选择器是把不存在的元素硬选出来。伪元素现在以双冒号开头-。由于某些早期的伪元素使用单冒号语法-现代游览器使用单冒号或双冒号语法支持早期的伪元素-以实现向后兼容。"}},[s._v("#")]),s._v(" 伪元素可以说是一种简单选择器，也可以说是一种机制，它和选择器很大的不同是，选择器是在结构树上或者行为上去选择元素，而伪元素选择器是把不存在的元素硬选出来。伪元素现在以双冒号开头::。由于某些早期的伪元素使用单冒号语法，现代游览器使用单冒号或双冒号语法支持早期的伪元素，以实现向后兼容。")]),s._v(" "),n("h4",{attrs:{id:"目前兼容性达到可用的伪元素有以下几种。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#目前兼容性达到可用的伪元素有以下几种。"}},[s._v("#")]),s._v(" 目前兼容性达到可用的伪元素有以下几种。")]),s._v(" "),n("ul",[n("li",[s._v("::first-line")]),s._v(" "),n("li",[s._v("::first-letter")]),s._v(" "),n("li",[s._v("::before")]),s._v(" "),n("li",[s._v("::after\n1.::first-line和::first-letter\n它们俩兄弟是比较类似的伪元素，其中一个表示元素的第一行，一个表示元素的第一个字母。试想一下，假设我们有一篇文章，需要在展示的时候把第一行的内容放大，如果不考虑伪元素，你该怎么做？如何去自适应各种屏幕大小，是一件很麻烦的事，但是有了伪元素，就可以直接指定到对应的文本内容。例如：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("article::first-line {\n    font-size: 120%;\n    font-weight: bold;\n}\n<article>\nGumbo beet greens corn soko endive gumbo gourd. Parsley shallot courgette tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.\n</article>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("这样，无论显示区域多宽，只有第一行会加粗变大。规则虽然听上去很简单，但是实际上，我们遇到的HTML结构要更为复杂，一旦元素中不是纯文本，规则就变得复杂了。"),n("br"),s._v("\nCSS标准规定了first-line必须出现在最内层的块级元素之内。first-letter的位置可以在所有标签之内。举个栗子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("div>p#a {\n    color:green;\n}\n\ndiv::first-line { \n    color:blue; \n}\n<div>\n  <p id=a>First paragraph</p>\n  <p>Second paragraph</p>\n</div>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("最终第一段显示的颜色事蓝色，因为伪元素出现在块级元素之内，所以p中的伪元素color覆盖了div>p#a中的color。\n如果我们把代码修改一下:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("div>span#a {\n    color:green;\n}\n\ndiv::first-line { \n    color:blue; \n}\n<div>\n  <span id=a>First paragraph</span><br/>\n  <span>Second paragraph</span>\n</div>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("第一行的颜色会是绿色，因为span不是块级元素，伪元素在span之外，所以最终div::first-line干不过div>span#a。如果把::first-line修改成::first-letter则不会有这个问题。\nCSS标准只要求::first-line和::first-letter实现有限的几个CSS属性，都是文本相关。")]),s._v(" "),n("p",[s._v("2.::before和::after\n这两个伪元素和前面不同，它不是把已有的内容套上一个元素，而是造出一个元素。")]),s._v(" "),n("ul",[n("li",[s._v("::before表示在元素内容之前插入一个虚拟的元素；")]),s._v(" "),n("li",[s._v("::after则表示在元素内容之后插入一个虚拟的元素；")]),s._v(" "),n("li",[s._v("这两个伪元素所在的CSS规则必须指定content属性才会生校，并且支持所有的CSS属性。"),n("br"),s._v("\n实际开发中，这两个伪元素非常有效，有了这两个伪元素，一些修饰性元素比如说小三角形，卡片凹槽，可以使用纯粹的CSS代码添加进去，这能够很好地保持HTML代码中的语义，既完成了显示效果，又不会让DOM中出现很多无语义的空元素。")])]),s._v(" "),n("h3",{attrs:{id:"组合优先级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组合优先级"}},[s._v("#")]),s._v(" 组合优先级")]),s._v(" "),n("p",[s._v("就和编译原理一样，先获得token为词法的最小单元。这里的简单选择器则就是最小单元。按照组合顺序从高到低的优先级是：")]),s._v(" "),n("ul",[n("li",[s._v("第一优先级"),n("br"),s._v("\n无链接符号")]),s._v(" "),n("li",[s._v("第二优先级"),n("br"),s._v("\n“空格”"),n("br"),s._v("\n“~”"),n("br"),s._v("\n“>”"),n("br"),s._v("\n“+”"),n("br"),s._v("\n“||”")]),s._v(" "),n("li",[s._v("第三优先级"),n("br"),s._v("\n“，”")])]),s._v(" "),n("p",[s._v("举个例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(".a,.b>.c.d {}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("在这个例子中，它实际上会构成一个结构树：\n"),n("img",{attrs:{src:"CSS-group-priority.png",alt:"CSS-group-priority.png"}}),s._v("\n这个树中省略了符号，按照这个组合优先级和树形结构，进行深度优化遍历，最终会先处理.c.d，然后是.b>.c.d，最后是.a,.b>.c.d。我们能来细化其中的关系：")]),s._v(" "),n("ul",[n("li",[s._v("例子中的.c.d是复合选择器，无符号链接，表示选中的元素必须同事具有c和d这两个class；是一种且的关系；")]),s._v(" "),n("li",[n("blockquote",[n("p",[s._v("是复杂选择器的一种针对节点关系的选择链接符，它一共有五种："),n("br"),s._v("\n1.“空格”：表示后代，表示选中所有符合条件的后代节点。一个元素中的节点层级是可以不断嵌套的，后代可能是子级也可能是子级的子级...\n2.“>”：子代，表示选中符合条件的子节点。它和后代的区别是，必须是子级的节点。\n3.“~”：后继，表示选中所有符合条件的后继节点，后继节点即跟当前节点具有同一个父元素，并出现在它之后的节点。"),n("br"),s._v("\n4.“+”： 直接后继，表示选中符合条件的直接后继节点，直接后继节点即nextSlibling。"),n("br"),s._v("\n5.“||”：列选择器，表示选中对应列中符合条件的单元格。"),n("br"),s._v("\n其中我们最常用的就是空格和>了，这两个链接符的支持也是最好的。通常可以用来避免CSS规则的命名污染问题。")])])]),s._v(" "),n("li",[s._v(",的选择器表示“或”的关系，其实可以分解成两个相同声明区块的普通规则，如.a,.b>.c.d其实是这样：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(".a {}\n.b>.c.d {}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("选择器的组合方式及组合优先级现在已经没问题啦，根据上面的选择器我们可以选择到相同或不同的元素，以及以不同的方式选择到对应的元素，并且可能其中设置了相同的样式内容，那么最终的元素渲染结果应该是哪一种，这就是选择器优先级的规则了。")]),s._v(" "),n("h3",{attrs:{id:"选择器的优先级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#选择器的优先级"}},[s._v("#")]),s._v(" 选择器的优先级")]),s._v(" "),n("h4",{attrs:{id:"css选择器的优先级计算-是按照最大范围为复杂优先级来计算的-也就是说-是不会影响优先级的。具体是以一个三元组-a-b-c-来构成一个复杂选择器的优先级。它的规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#css选择器的优先级计算-是按照最大范围为复杂优先级来计算的-也就是说-是不会影响优先级的。具体是以一个三元组-a-b-c-来构成一个复杂选择器的优先级。它的规则"}},[s._v("#")]),s._v(" CSS选择器的优先级计算，是按照最大范围为复杂优先级来计算的，也就是说'，'是不会影响优先级的。具体是以一个三元组(a,b,c)来构成一个复杂选择器的优先级。它的规则：")]),s._v(" "),n("ul",[n("li",[s._v("id选择器的数目记为a；")]),s._v(" "),n("li",[s._v("伪类选择器和class选择器的数目记为b；")]),s._v(" "),n("li",[s._v("伪元素选择器和标签选择器数目记为c；")]),s._v(" "),n("li",[s._v("“*”不影响优先级。\n一个复杂优先级的计算公式为"),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("specificity = base * base * a + base * b + c\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])])])]),s._v(" "),n("h4",{attrs:{id:"base是一个-足够大-的正整数。这个-足够大-是无论a-b-c是多大-都会是c-baseb-basebase-a这样的结果。不过根据css的-层叠-特性-行内属性的优先级永远高于css规则-也就是写在元素上的style样式会覆盖上面的优先级。而最高的优先级是为样式内容后面添加-important-这个用法非常危险-因为它相当于一个新的优先级-而且此优先级会高于行内属性。同一优先级的选择器遵循-后面的覆盖前面的-原则。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#base是一个-足够大-的正整数。这个-足够大-是无论a-b-c是多大-都会是c-baseb-basebase-a这样的结果。不过根据css的-层叠-特性-行内属性的优先级永远高于css规则-也就是写在元素上的style样式会覆盖上面的优先级。而最高的优先级是为样式内容后面添加-important-这个用法非常危险-因为它相当于一个新的优先级-而且此优先级会高于行内属性。同一优先级的选择器遵循-后面的覆盖前面的-原则。"}},[s._v("#")]),s._v(" base是一个“足够大”的正整数。这个“足够大”是无论a,b,c是多大，都会是c < base"),n("em",[s._v("b < base")]),s._v("base*a这样的结果。不过根据CSS的“层叠”特性，行内属性的优先级永远高于CSS规则，也就是写在元素上的style样式会覆盖上面的优先级。而最高的优先级是为样式内容后面添加!important，这个用法非常危险，因为它相当于一个新的优先级，而且此优先级会高于行内属性。同一优先级的选择器遵循“后面的覆盖前面的”原则。")]),s._v(" "),n("h4",{attrs:{id:"举一个例子-有如下元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#举一个例子-有如下元素"}},[s._v("#")]),s._v(" 举一个例子，有如下元素")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<div id="my" class="x y">text<div>\n.x {\n    background-color: lightblue;\n}\n.y {\n    background-color: lightgreen;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h4",{attrs:{id:"最终的颜色会是绿色-如果调换css中的规则顺序-则结果会是蓝色。选择器的优先级是针对单条规则的-多条规则的选择器同时命中元素-优先级不会发生叠加。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最终的颜色会是绿色-如果调换css中的规则顺序-则结果会是蓝色。选择器的优先级是针对单条规则的-多条规则的选择器同时命中元素-优先级不会发生叠加。"}},[s._v("#")]),s._v(" 最终的颜色会是绿色，如果调换CSS中的规则顺序，则结果会是蓝色。选择器的优先级是针对单条规则的，多条规则的选择器同时命中元素，优先级不会发生叠加。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<div id="my" class="x y z">text<div>\n.x, .z {\n    background-color: lightblue;\n}\n.y {\n    background-color: lightgreen;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h4",{attrs:{id:"在这个例子中-x和-y两个class同时设置了相同的颜色-但是因为-y规则在最后-所以最终显示结果为绿色。选择器的优先级是针对复杂选择器的优先级-选择器列表不会合并计算优先级。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在这个例子中-x和-y两个class同时设置了相同的颜色-但是因为-y规则在最后-所以最终显示结果为绿色。选择器的优先级是针对复杂选择器的优先级-选择器列表不会合并计算优先级。"}},[s._v("#")]),s._v(" 在这个例子中，.x和.y两个class同时设置了相同的颜色，但是因为.y规则在最后，所以最终显示结果为绿色。选择器的优先级是针对复杂选择器的优先级，选择器列表不会合并计算优先级。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<div id="my" class="x y z">text<div>\n.x, .z {\n    background-color: lightblue;\n}\n.y {\n    background-color: lightgreen;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h4",{attrs:{id:"这里选择器列表-x-z-命中了-div-但是它的两项分别计算优先级-所以最终优先级仍跟-y-规则相同。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#这里选择器列表-x-z-命中了-div-但是它的两项分别计算优先级-所以最终优先级仍跟-y-规则相同。"}},[s._v("#")]),s._v(" 这里选择器列表“ .x, .z”命中了 div，但是它的两项分别计算优先级，所以最终优先级仍跟“ .y” 规则相同。")]),s._v(" "),n("h4",{attrs:{id:"选择器的优先级规则就是这些了-利用这个优先级可以配合js实现很多交互功能。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#选择器的优先级规则就是这些了-利用这个优先级可以配合js实现很多交互功能。"}},[s._v("#")]),s._v(" 选择器的优先级规则就是这些了，利用这个优先级可以配合JS实现很多交互功能。")])])}),[],!1,null,null,null);a.default=t.exports}}]);