(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{568:function(s,a,n){"use strict";n.r(a);var e=n(3),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"title"}),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),n("h4",{attrs:{id:"leetcode是一个全球极客挚爱的成长平台。地址leetcode官网。里面有很多题目-还有比赛、模拟面试等等。感兴趣的朋友可以去刷刷题-看看。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#leetcode是一个全球极客挚爱的成长平台。地址leetcode官网。里面有很多题目-还有比赛、模拟面试等等。感兴趣的朋友可以去刷刷题-看看。"}},[s._v("#")]),s._v(" Leetcode是一个全球极客挚爱的成长平台。地址"),n("a",{attrs:{href:"https://leetcode-cn.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Leetcode官网"),n("OutboundLink")],1),s._v("。里面有很多题目，还有比赛、模拟面试等等。感兴趣的朋友可以去刷刷题，看看。")])]),n("h3",{attrs:{id:"题目-有效的括号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目-有效的括号"}},[s._v("#")]),s._v(" 题目： 有效的括号")]),s._v(" "),n("h4",{attrs:{id:"给定一个只包括-的字符串-判断字符串是否有效。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#给定一个只包括-的字符串-判断字符串是否有效。"}},[s._v("#")]),s._v(" 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。")]),s._v(" "),n("h4",{attrs:{id:"有效字符串需满足"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有效字符串需满足"}},[s._v("#")]),s._v(" 有效字符串需满足：")]),s._v(" "),n("ul",[n("li",[s._v("左括号必须用相同类型的右括号闭合。")]),s._v(" "),n("li",[s._v("左括号必须以正确的顺序闭合。\n注意空字符串可被认为是有效字符串。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('示例 1:\n输入: "()"\n输出: true\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('示例 2:\n输入: "()[]{}"\n输出: true\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('示例 3:\n输入: "(]"\n输出: false\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('示例 4:\n输入: "([)]"\n输出: false\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('示例 5:\n输入: "{[]}"\n输出: true\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h4",{attrs:{id:"方法1-暴力法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法1-暴力法"}},[s._v("#")]),s._v(" 方法1： 暴力法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    var isValid = function (s) {\n    // 首先判断是否是字符串长度于2是否为0\n      if (s.length % 2) return false;\n    // 根据字符串长度循环遍历\n    // replace替换每对括号\n    // 当一次循环下来没有括号替换时,返回false\n    // 当循环完毕,字符串都被替换为空,长度为0, 则返回true\n    \n      while (s.length) {\n        var temp = s;\n        console.log('while', s, temp);\n        s = s.replace('()', '');\n        s = s.replace('[]', '');\n        s = s.replace('{}', '');\n        if (s == temp) return false\n      }\n      return true;\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h4",{attrs:{id:"方法2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法2"}},[s._v("#")]),s._v(" 方法2：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    var isValid = function (s) {\n      var length = s.length;\n      // 首先判断是否是字符串长度于2是否为0\n      if (length % 2) return false;\n      // 申明一个对象\n      const map = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n      }\n      // 把传进来的字符串分割成数组\n      let old = s.split('');\n      // 创建空的新数组\n      let now = [];\n      // while根据old数组长度循环遍历\n      while (old.length) {\n        // 获取数组最后一项\n        let leftChar = old.pop();\n        // 判断对象中是否有数组最后一项的属性名， 如果有则对应的这个属性名的属性值。\n        // 如果没有则为undefined\n        if (map[leftChar]) {\n          // 有这个属性值就继续判断这个属性值是否等于now数组中的最后一项  不是就返回false\n          if (map[leftChar] != now.pop()) return false;\n        } else {\n          // 没有这个属性值就往新数组里面push这个刚获取的 原数组的最后一项\n          now.push(leftChar);\n        }\n      }\n      // 如果上面没有return false 就能一直走到这里return true\n      return true;\n    };\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br")])]),n("h4",{attrs:{id:"方法2-有点入栈出栈的原理。比如我们有个字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法2-有点入栈出栈的原理。比如我们有个字符串"}},[s._v("#")]),s._v(" 方法2 有点入栈出栈的原理。比如我们有个字符串")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('  var str = \'[]{()[]}\';\n  // 然后执行\n  isValid(ss);\n  // 第一次循环\n  // old =  ["[", "]", "{", "(", ")", "[", "]"]; now = ["}"]\n  // 第二次循环  now一直push在最后一项 可以理解为入栈\n  // old = ["[", "]", "{", "(", ")", "["]; now = ["}", "]"]\n  // 第三次循环  "[" 在map对象里面有这个属性名 所以map[leftChar]为true进入判断\n  // 再次判断 map["["]的属性值为 "]" 刚好和now最后一项一样。 那就继续执行循环\n  // 因为pop方法会删除原数组最后一项，所以now= ["}"]，这里就是出栈了。  \n  // 原数组也一样每次pop，原数组的长度就会-1，一直到数组长度为0时，不进入判断，返回true。\n  //  如果当中出现了属性值对不上的 就返回false了\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);