(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{593:function(a,s,t){"use strict";t.r(s);var e=t(3),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("h3",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),t("h4",{attrs:{id:"本篇文章是javascript重塑篇的第三篇-原型篇。在第二篇中说到-javascript中的两种面向对象编程的范式-基于类和基于原型-本篇文章详细讲解基于原型和类。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本篇文章是javascript重塑篇的第三篇-原型篇。在第二篇中说到-javascript中的两种面向对象编程的范式-基于类和基于原型-本篇文章详细讲解基于原型和类。"}},[a._v("#")]),a._v(" 本篇文章是JavaScript重塑篇的第三篇-原型篇。在第二篇中说到，JavaScript中的两种面向对象编程的范式：基于类和基于原型，本篇文章详细讲解基于原型和类。")])]),t("h2",{attrs:{id:"什么是原型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是原型"}},[a._v("#")]),a._v(" 什么是原型？")]),a._v(" "),t("h4",{attrs:{id:"原型是顺应人类自然思维的产物。像成语-照猫画虎-这里看起来猫就是老虎的原型。所以-古人就开始使用原型来描述对象。在编程语言中-有很多流派-其中最为成功的流派使用的时-类-的方式来描述对象-如c-、java-还有一种流派就是用基于原型来描述对象-javascript就是其中代表。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型是顺应人类自然思维的产物。像成语-照猫画虎-这里看起来猫就是老虎的原型。所以-古人就开始使用原型来描述对象。在编程语言中-有很多流派-其中最为成功的流派使用的时-类-的方式来描述对象-如c-、java-还有一种流派就是用基于原型来描述对象-javascript就是其中代表。"}},[a._v("#")]),a._v(" 原型是顺应人类自然思维的产物。像成语“照猫画虎”，这里看起来猫就是老虎的原型。所以，古人就开始使用原型来描述对象。在编程语言中，有很多流派，其中最为成功的流派使用的时“类”的方式来描述对象，如C++、Java；还有一种流派就是用基于原型来描述对象，JavaScript就是其中代表。")]),a._v(" "),t("ul",[t("li",[a._v("“基于类”的编程提倡使用一个关注分类和类之间关系开发模型。这类语言中，总是要先有类，然后从类去实例化一个对象。而类与类之间有可能会形成继承、组合等关系。类又往往与语言的类型系统整合，形成一定编译时的能力。")]),a._v(" "),t("li",[a._v("“基于原型”的编程时更提倡使用者去关注一系列对象实例的行为，而后才去关系如何将这些对象，划分到最近的使用方式相似的原型对象，而不是将它们分成类。基于原型的面型对象系统通过“复制”的方式来创建新对象。一些语言的实现中，还允许复制一个空对象，这实际上就是创建一个全新的对象。")])]),a._v(" "),t("h4",{attrs:{id:"使用原型来描述对象的语言有多种-如self、kevo等-它们的原型系统的-复制操作-有两种实现思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用原型来描述对象的语言有多种-如self、kevo等-它们的原型系统的-复制操作-有两种实现思路"}},[a._v("#")]),a._v(" 使用原型来描述对象的语言有多种，如self、kevo等，它们的原型系统的“复制操作”有两种实现思路：")]),a._v(" "),t("ul",[t("li",[a._v("一个是并不真的去复制一个原型对象，而是使得新对象持有一个原型的引用；")]),a._v(" "),t("li",[a._v("另一个是切实地复制对象，从此两个对象再无关联。")])]),a._v(" "),t("h4",{attrs:{id:"显然我们的javascript是第一种方式。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#显然我们的javascript是第一种方式。"}},[a._v("#")]),a._v(" 显然我们的JavaScript是第一种方式。")]),a._v(" "),t("h2",{attrs:{id:"javascript的原型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript的原型"}},[a._v("#")]),a._v(" JavaScript的原型")]),a._v(" "),t("h4",{attrs:{id:"javascript的原型系统可以简单概括为以下两条"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript的原型系统可以简单概括为以下两条"}},[a._v("#")]),a._v(" JavaScript的原型系统可以简单概括为以下两条：")]),a._v(" "),t("p",[a._v("1.如果所有对象都有私有字段[prototype]，就是对象的原型；"),t("br"),a._v("\n2.读一个属性，如果对象本身没有，就去对象的原型上去找，依次类推直到原型为空或者找到位置；")]),a._v(" "),t("h4",{attrs:{id:"es6后-javascript提供了三个方法-让使用者更方便的操纵原型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6后-javascript提供了三个方法-让使用者更方便的操纵原型"}},[a._v("#")]),a._v(" ES6后，JavaScript提供了三个方法，让使用者更方便的操纵原型：")]),a._v(" "),t("p",[a._v("1.Object.create 根据指定的原型创建新对象，原型可以是null；"),t("br"),a._v("\n2.Object.getPrototypeOf获得一个对象的原型；"),t("br"),a._v("\n3.Object.setPrototypeOf设置一个对象的原型；")]),a._v(" "),t("h4",{attrs:{id:"下面举个栗子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#下面举个栗子"}},[a._v("#")]),a._v(" 下面举个栗子：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var xiaoming = {\n  say() {\n    console.log('hello');\n  },\n  eat() {\n    console.log('hamburger');\n  }\n}\n\nvar xiaofang = Object.create(xiaoming, {\n  say: {\n    value: function() {\n      console.log('haha');\n    }\n  }\n})\n\nvar xiaoming2 = Object.create(xiaoming);\nxiaoming2.say();\nvar xiaofang2 = Object.create(xiaofang);\nxiaofang2.say();\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br")])]),t("h4",{attrs:{id:"上面的代码-先创建了一个-小明-然后根据小明做了一些修改创建了小芳-再用object-create来创建其他的小明和小芳-我们可以通过控制最开始的小明和小芳来控制所有的小明和小芳。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#上面的代码-先创建了一个-小明-然后根据小明做了一些修改创建了小芳-再用object-create来创建其他的小明和小芳-我们可以通过控制最开始的小明和小芳来控制所有的小明和小芳。"}},[a._v("#")]),a._v(" 上面的代码，先创建了一个‘小明’，然后根据小明做了一些修改创建了小芳，再用Object.create来创建其他的小明和小芳，我们可以通过控制最开始的小明和小芳来控制所有的小明和小芳。")]),a._v(" "),t("h2",{attrs:{id:"es6中的类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6中的类"}},[a._v("#")]),a._v(" ES6中的类")]),a._v(" "),t("h4",{attrs:{id:"这里讲一下es6新特性加入的class。class是关键字-在标准中删除了所有-class-相关的私有属性描述-类的概念正是从属性升级成语言的基础设施。先看下类的基本写法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#这里讲一下es6新特性加入的class。class是关键字-在标准中删除了所有-class-相关的私有属性描述-类的概念正是从属性升级成语言的基础设施。先看下类的基本写法"}},[a._v("#")]),a._v(" 这里讲一下ES6新特性加入的class。class是关键字，在标准中删除了所有[class]相关的私有属性描述，类的概念正是从属性升级成语言的基础设施。先看下类的基本写法：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class Rectangle {\n  constructor(height,width) {\n    this.height = height;\n    this.width = width;\n  }\n  // Getter\n  get info() {\n    return this.fetchInfo();\n  }\n  // Method\n  fetchInfo() {\n    return this.height * this.width;\n  }\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br")])]),t("h4",{attrs:{id:"在现有的类语法中-getter-setter和method是兼容性最好的。我们通过get-set关键字来创建getter-通过括号和大括号来创建方法-数据型成员最好写在构造器里面。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在现有的类语法中-getter-setter和method是兼容性最好的。我们通过get-set关键字来创建getter-通过括号和大括号来创建方法-数据型成员最好写在构造器里面。"}},[a._v("#")]),a._v(" 在现有的类语法中，getter/setter和method是兼容性最好的。我们通过get/set关键字来创建getter，通过括号和大括号来创建方法，数据型成员最好写在构造器里面。")]),a._v(" "),t("h4",{attrs:{id:"类的写法实际上也是由原型运行时来承载的-逻辑上javascript认为每个类是有共同原型的一组对象-类中定义的方法和属性则会被写在原型对象之上。最重要的是-类提供了继承能力。代码如下"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的写法实际上也是由原型运行时来承载的-逻辑上javascript认为每个类是有共同原型的一组对象-类中定义的方法和属性则会被写在原型对象之上。最重要的是-类提供了继承能力。代码如下"}},[a._v("#")]),a._v(" 类的写法实际上也是由原型运行时来承载的，逻辑上JavaScript认为每个类是有共同原型的一组对象，类中定义的方法和属性则会被写在原型对象之上。最重要的是，类提供了继承能力。代码如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class Man {\n  constructor(name) {\n    this.name = name;\n  }\n  say() {\n    console.log(this.name + ' is Man');\n  }\n}\nclass Cat extends Man {\n  constructor(name) {\n    super(name); \n  }\n  say() {\n    console.log(this.name + ' is cat');\n  }\n}\nlet q = new Cat('jumao');\nq.say(); // jumao is cat\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br")])]),t("h4",{attrs:{id:"上面代码先创建了一个类-man-然后通过extends关键字让cat继承了它-最终调用子类的say方法获取父类的name。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#上面代码先创建了一个类-man-然后通过extends关键字让cat继承了它-最终调用子类的say方法获取父类的name。"}},[a._v("#")]),a._v(" 上面代码先创建了一个类‘Man’，然后通过extends关键字让Cat继承了它，最终调用子类的say方法获取父类的name。")]),a._v(" "),t("h4",{attrs:{id:"所以在新的es版本中-我们不需要再模拟类了。可以用class关键字来定义类。我们可以自由选择原型或者类作为代码的抽象风格-但无论我们选择那种-理解运行时的原型系统都是很有必要的一件事。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#所以在新的es版本中-我们不需要再模拟类了。可以用class关键字来定义类。我们可以自由选择原型或者类作为代码的抽象风格-但无论我们选择那种-理解运行时的原型系统都是很有必要的一件事。"}},[a._v("#")]),a._v(" 所以在新的ES版本中，我们不需要再模拟类了。可以用class关键字来定义类。我们可以自由选择原型或者类作为代码的抽象风格，但无论我们选择那种，理解运行时的原型系统都是很有必要的一件事。")])])}),[],!1,null,null,null);s.default=n.exports}}]);