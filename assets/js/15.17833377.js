(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{514:function(a,s,t){a.exports=t.p+"assets/img/Null.7d0063fd.png"},515:function(a,s,t){a.exports=t.p+"assets/img/type-change-table.af9e630a.png"},575:function(a,s,t){"use strict";t.r(s);var e=t(3),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("h3",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),e("h4",{attrs:{id:"本篇文章是javascript重塑篇的第一篇-讲述javascript在运行时的几种类型。本篇从运行时的角度-去看javascript的类型系统-从简单到复杂。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本篇文章是javascript重塑篇的第一篇-讲述javascript在运行时的几种类型。本篇从运行时的角度-去看javascript的类型系统-从简单到复杂。"}},[a._v("#")]),a._v(" 本篇文章是JavaScript重塑篇的第一篇，讲述JavaScript在运行时的几种类型。本篇从运行时的角度，去看JavaScript的类型系统，从简单到复杂。")])]),e("h3",{attrs:{id:"根据最新的语言标准-javascript语言类型一共有下面七种"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根据最新的语言标准-javascript语言类型一共有下面七种"}},[a._v("#")]),a._v(" 根据最新的语言标准，JavaScript语言类型一共有下面七种：")]),a._v(" "),e("p",[a._v("1.Undefined;"),e("br"),a._v("\n2.Null;"),e("br"),a._v("\n3.Boolean;"),e("br"),a._v("\n4.String;"),e("br"),a._v("\n5.Number;"),e("br"),a._v("\n6.Object;"),e("br"),a._v("\n7.Symbol;")]),a._v(" "),e("h2",{attrs:{id:"undefined"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#undefined"}},[a._v("#")]),a._v(" Undefined")]),a._v(" "),e("h4",{attrs:{id:"undefind类型只有一个值-就是undefined。任何没有被赋值的变量会有个默认值-undefined。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#undefind类型只有一个值-就是undefined。任何没有被赋值的变量会有个默认值-undefined。"}},[a._v("#")]),a._v(" Undefind类型只有一个值，就是Undefined。任何没有被赋值的变量会有个默认值 undefined。")]),a._v(" "),e("h4",{attrs:{id:"通常会在这几种情况中出现undefined"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通常会在这几种情况中出现undefined"}},[a._v("#")]),a._v(" 通常会在这几种情况中出现Undefined：")]),a._v(" "),e("ul",[e("li",[a._v("变量声明但是未赋值，获取该变量是Undefined；")]),a._v(" "),e("li",[a._v("函数调用时，没有提供指定的参数，该参数为Undefined；")]),a._v(" "),e("li",[a._v("函数没有返回值，调用结果默认返回Undefined；")]),a._v(" "),e("li",[a._v("获取对象没有定义的属性时返回Undefined；")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var a;\nconsole.log(a); // undefined\n\nfunction fn(arg) {\n  console.log(arg)\n}\n\nvar c = fn(); // undefined undefined\nconsole.log(c); //undefined\n\nvar o = new Object();\nconsole.log(o.x); // undefined\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br")])]),e("h4",{attrs:{id:"需要注意的是-undefined并不是一个关键字-所以我们是可以对undefined进行赋值操作的-这是javascript语言公认的设计失误之一-为避免无意中篡改-我们可以使用void-0-来获取undefined的值。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#需要注意的是-undefined并不是一个关键字-所以我们是可以对undefined进行赋值操作的-这是javascript语言公认的设计失误之一-为避免无意中篡改-我们可以使用void-0-来获取undefined的值。"}},[a._v("#")]),a._v(" 需要注意的是，undefined并不是一个"),e("strong",[a._v("关键字")]),a._v("，所以我们是可以对undefined进行赋值操作的，这是JavaScript语言公认的设计失误之一，为避免无意中篡改，我们可以使用void(0) 来获取undefined的值。")]),a._v(" "),e("h2",{attrs:{id:"null"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[a._v("#")]),a._v(" Null")]),a._v(" "),e("h4",{attrs:{id:"null-类型只有一个值-就是-null。它的语义表示空值-与-undefined-不同-null-是-javascript-关键字-所以在任何代码中-你都可以放心用-null-关键字来获取-null-值。null在内存里的表示就是-栈中的变量没有指向堆中的内存对象。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#null-类型只有一个值-就是-null。它的语义表示空值-与-undefined-不同-null-是-javascript-关键字-所以在任何代码中-你都可以放心用-null-关键字来获取-null-值。null在内存里的表示就是-栈中的变量没有指向堆中的内存对象。"}},[a._v("#")]),a._v(" Null 类型只有一个值，就是 null。它的语义表示空值，与 undefined 不同，null 是 JavaScript 关键字，所以在任何代码中，你都可以放心用 null 关键字来获取 null 值。Null在内存里的表示就是，栈中的变量没有指向堆中的内存对象。")]),a._v(" "),e("p",[e("img",{attrs:{src:t(514),alt:"null"}})]),a._v(" "),e("h4",{attrs:{id:"一般需要清空某个对象的时候可以给它赋值为null。-然后对象原型链的终点也是null。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一般需要清空某个对象的时候可以给它赋值为null。-然后对象原型链的终点也是null。"}},[a._v("#")]),a._v(" 一般需要清空某个对象的时候可以给它赋值为Null。 然后对象原型链的终点也是Null。")]),a._v(" "),e("h2",{attrs:{id:"undefined和null的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#undefined和null的区别"}},[a._v("#")]),a._v(" Undefined和Null的区别")]),a._v(" "),e("h4",{attrs:{id:"undefined和null它们俩兄弟都有点-无-的意思-如果使用非严格模式匹配它们也是相等的。当然严格模式下是不等的。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#undefined和null它们俩兄弟都有点-无-的意思-如果使用非严格模式匹配它们也是相等的。当然严格模式下是不等的。"}},[a._v("#")]),a._v(" Undefined和Null它们俩兄弟都有点‘无’的意思，如果使用非严格模式匹配它们也是相等的。当然严格模式下是不等的。")]),a._v(" "),e("p",[a._v("null是表示一个“无”的对象，转为数值类型时为0；undefined是表示一个“无”的原始值，转为数值类型时为NaN；")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("null == undefined; // true\nnull === undefined; // false\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h2",{attrs:{id:"boolean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[a._v("#")]),a._v(" Boolean")]),a._v(" "),e("h4",{attrs:{id:"布尔表示一个逻辑实体-有两个值-true-和-false。if判断中经常用来判断变量是否为true。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#布尔表示一个逻辑实体-有两个值-true-和-false。if判断中经常用来判断变量是否为true。"}},[a._v("#")]),a._v(" 布尔表示一个逻辑实体，有两个值：true 和 false。if判断中经常用来判断变量是否为true。")]),a._v(" "),e("h2",{attrs:{id:"string"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[a._v("#")]),a._v(" String")]),a._v(" "),e("h4",{attrs:{id:"string用于表示文本数据。而且它有最大长度-是2-53-1-这在一般开发中都是够用的。它这个最大长度不是指的字符数-而是字符串的utf16编码。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string用于表示文本数据。而且它有最大长度-是2-53-1-这在一般开发中都是够用的。它这个最大长度不是指的字符数-而是字符串的utf16编码。"}},[a._v("#")]),a._v(" String用于表示文本数据。而且它有最大长度，是2^53 - 1，这在一般开发中都是够用的。它这个最大长度不是指的字符数，而是字符串的UTF16编码。")]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[a._v("Note：现行的字符集国际标准，字符是以 Unicode 的方式表示的，每一个 Unicode 的码点表示一个字符，理论上，Unicode 的范围是无限的。UTF 是 Unicode 的编码方式，规定了码点在计算机中的表示方法，常见的有 UTF16 和 UTF8。 Unicode 的码点通常用 U+??? 来表示，其中 ??? 是十六进制的码点值。 0-65536（U+0000 - U+FFFF）的码点被称为基本字符区域（BMP）。")])]),e("h2",{attrs:{id:"number"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[a._v("#")]),a._v(" Number")]),a._v(" "),e("h4",{attrs:{id:"number类型表示我们通常意义上的-数字-。可以理解为数学中的有理数-在计算机中-有一定的精度限制。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#number类型表示我们通常意义上的-数字-。可以理解为数学中的有理数-在计算机中-有一定的精度限制。"}},[a._v("#")]),a._v(" Number类型表示我们通常意义上的“数字”。可以理解为数学中的有理数，在计算机中，有一定的精度限制。")]),a._v(" "),e("h4",{attrs:{id:"javascript中的number类型有18437736874454810627-即2-64-2-53-3-个值。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript中的number类型有18437736874454810627-即2-64-2-53-3-个值。"}},[a._v("#")]),a._v(" JavaScript中的Number类型有18437736874454810627（即2^64-2^53+3)个值。")]),a._v(" "),e("h4",{attrs:{id:"javascript-中的-number-类型基本符合-ieee-754-2008-规定的双精度浮点数规则-但是-javascript-为了表达几个额外的语言场景-比如不让除以-0-出错-而引入了无穷大的概念-规定了几个例外情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-中的-number-类型基本符合-ieee-754-2008-规定的双精度浮点数规则-但是-javascript-为了表达几个额外的语言场景-比如不让除以-0-出错-而引入了无穷大的概念-规定了几个例外情况"}},[a._v("#")]),a._v(" JavaScript 中的 Number 类型基本符合 IEEE 754-2008 规定的双精度浮点数规则，但是 JavaScript 为了表达几个额外的语言场景（比如不让除以 0 出错，而引入了无穷大的概念），规定了几个例外情况：")]),a._v(" "),e("ul",[e("li",[a._v("NaN，占用了 9007199254740990，这原本是符合 IEEE 规则的数字；")]),a._v(" "),e("li",[a._v("Infinity，无穷大")]),a._v(" "),e("li",[a._v("-Infinity，负无穷大")])]),a._v(" "),e("h4",{attrs:{id:"另外-值得注意的是-javascript-中有-0-和-0-在加法类运算中它们没有区别-但是除法的场合则需要特别留意区分-忘记检测除以-0-而得到负无穷大-的情况经常会导致错误-而区分-0-和-0-的方式-正是检测-1-x-是-infinity-还是-infinity。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#另外-值得注意的是-javascript-中有-0-和-0-在加法类运算中它们没有区别-但是除法的场合则需要特别留意区分-忘记检测除以-0-而得到负无穷大-的情况经常会导致错误-而区分-0-和-0-的方式-正是检测-1-x-是-infinity-还是-infinity。"}},[a._v("#")]),a._v(" 另外，值得注意的是，JavaScript 中有 +0 和 -0，在加法类运算中它们没有区别，但是除法的场合则需要特别留意区分，“忘记检测除以 -0，而得到负无穷大”的情况经常会导致错误，而区分 +0 和 -0 的方式，正是检测 1/x 是 Infinity 还是 -Infinity。")]),a._v(" "),e("h4",{attrs:{id:"根据双精度浮点数的定义-number-类型中有效的整数范围是-0x1fffffffffffff-至-0x1fffffffffffff-所以-number-无法精确表示此范围外的整数。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根据双精度浮点数的定义-number-类型中有效的整数范围是-0x1fffffffffffff-至-0x1fffffffffffff-所以-number-无法精确表示此范围外的整数。"}},[a._v("#")]),a._v(" 根据双精度浮点数的定义，Number 类型中有效的整数范围是 -0x1fffffffffffff 至 0x1fffffffffffff，所以 Number 无法精确表示此范围外的整数。")]),a._v(" "),e("h4",{attrs:{id:"根据浮点数的定义-浮点数运算的精度问题导致等式左右的结果并不是严格相等-而是相差了个微小的值。比如"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根据浮点数的定义-浮点数运算的精度问题导致等式左右的结果并不是严格相等-而是相差了个微小的值。比如"}},[a._v("#")]),a._v(" 根据浮点数的定义，浮点数运算的精度问题导致等式左右的结果并不是严格相等，而是相差了个微小的值。比如：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("console.log(0.1 + 0.2 === 0.3);  // false\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("h4",{attrs:{id:"其实这里错误的是比较的方法-如果我们使用最小精度值来检查-就可以得到正确的结果。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其实这里错误的是比较的方法-如果我们使用最小精度值来检查-就可以得到正确的结果。"}},[a._v("#")]),a._v(" 其实这里错误的是比较的方法，如果我们使用最小精度值来检查，就可以得到正确的结果。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("console.log(Math.abs(0.1 + 0.2 - 0.3) <= Number.EPSILON); // true\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("h2",{attrs:{id:"symbol"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[a._v("#")]),a._v(" Symbol")]),a._v(" "),e("h4",{attrs:{id:"symbol类型是可用作object属性的键的所有非string值的集合。每个可能的symbol值都是唯一且不可变的。每个symbol值都不可变地保存一个名为-description-的关联值-该值是undefined的或string值。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#symbol类型是可用作object属性的键的所有非string值的集合。每个可能的symbol值都是唯一且不可变的。每个symbol值都不可变地保存一个名为-description-的关联值-该值是undefined的或string值。"}},[a._v("#")]),a._v(" Symbol类型是可用作Object属性的键的所有非String值的集合。每个可能的Symbol值都是唯一且不可变的。每个Symbol值都不可变地保存一个名为[[Description]]的关联值，该值是undefined的或String值。")]),a._v(" "),e("h3",{attrs:{id:"symbol的特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#symbol的特点"}},[a._v("#")]),a._v(" Symbol的特点")]),a._v(" "),e("h4",{attrs:{id:"symbol类型时es6新增的一种类型-它有以下几个特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#symbol类型时es6新增的一种类型-它有以下几个特点"}},[a._v("#")]),a._v(" "),e("code",[a._v("Symbol")]),a._v("类型时ES6新增的一种类型，它有以下几个特点：")]),a._v(" "),e("p",[a._v("1.它和"),e("code",[a._v("String")]),a._v("、"),e("code",[a._v("Number")]),a._v("、"),e("code",[a._v("Bollean")]),a._v("、"),e("code",[a._v("Undefined")]),a._v("、"),e("code",[a._v("Null")]),a._v("一样，都是原始类型，不能使用new命令创建。由于生成的Symbol是一个原始类型的值。也不可以添加属性。"),e("br"),a._v("\n2.使用"),e("code",[a._v("Symbol")]),a._v("函数创建的值时独一无二的，在创建的时候可以传递一个字符串描述用于区分，当参数为对象时，将调用对象的"),e("code",[a._v("toString")]),a._v("方法。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const s1 = Symbol();\nconst s2 = Symbol('bar');\nconst s3 = Symbol('bar');\n\ns1; // Symbol()\ns2; // Symbol(bar)\n\ns2 == s3; // false\ns2 === s3; // false\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br")])]),e("h4",{attrs:{id:"上面的代码使用两个相同的字符串作为参数创建的symbol变量-对比仍是不相等的。可见它们创建出来是独一无二的。如果想要创建相等的symbol变量-可以使用symbol-for方法。该方法接受一个参数key-然后搜索有没有以该参数作为名称的symbol-如果有就返回这个值-否则就创建一个新的symbol值。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#上面的代码使用两个相同的字符串作为参数创建的symbol变量-对比仍是不相等的。可见它们创建出来是独一无二的。如果想要创建相等的symbol变量-可以使用symbol-for方法。该方法接受一个参数key-然后搜索有没有以该参数作为名称的symbol-如果有就返回这个值-否则就创建一个新的symbol值。"}},[a._v("#")]),a._v(" 上面的代码使用两个相同的字符串作为参数创建的Symbol变量，对比仍是不相等的。可见它们创建出来是独一无二的。如果想要创建相等的Symbol变量，可以使用"),e("code",[a._v("Symbol.for")]),a._v("方法。该方法接受一个参数"),e("code",[a._v("key")]),a._v("，然后搜索有没有以该参数作为名称的Symbol，如果有就返回这个值，否则就创建一个新的Symbol值。")]),a._v(" "),e("p",[a._v("3.使用"),e("code",[a._v("Symbol")]),a._v("作为对象的属性名时，该属性不会出现在"),e("code",[a._v("for in")]),a._v("，"),e("code",[a._v("for of")]),a._v("循环中，也不会被"),e("code",[a._v("Object.keys()")]),a._v("、"),e("code",[a._v("Object.getOwnPropertyNames()")]),a._v("、"),e("code",[a._v("JSON.stringify()")]),a._v("返回。但是它绝对不是一个私有属性。可以用"),e("code",[a._v("Object.getOwnPropertySymbols()")]),a._v("方法获取指定对象的所有Symbol属性名。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const obj = {};\nconst foo = Symbol('foo');\nobj[foo] = 'hello';\n\nfor(let key in obj) {\n  console.log(key); // 无输出\n}\nObject.getOwnPropertyNames(obj); // []\nObject.getOwnPropertySymbols(obj); // [Symbol(foo)]\n\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br")])]),e("h2",{attrs:{id:"object"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[a._v("#")]),a._v(" Object")]),a._v(" "),e("h4",{attrs:{id:"object-是-javascript-中最复杂的类型-也是-javascript-的核心机制之一。object-表示对象的意思-它是一切有形和无形物体的总称。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-是-javascript-中最复杂的类型-也是-javascript-的核心机制之一。object-表示对象的意思-它是一切有形和无形物体的总称。"}},[a._v("#")]),a._v(" Object 是 JavaScript 中最复杂的类型，也是 JavaScript 的核心机制之一。Object 表示对象的意思，它是一切有形和无形物体的总称。")]),a._v(" "),e("h3",{attrs:{id:"包装类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#包装类型"}},[a._v("#")]),a._v(" 包装类型")]),a._v(" "),e("h4",{attrs:{id:"javascript的几个基本类型-在对象类型中都有一个-亲戚-。分别是"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript的几个基本类型-在对象类型中都有一个-亲戚-。分别是"}},[a._v("#")]),a._v(" JavaScript的几个基本类型，在对象类型中都有一个“亲戚”。分别是：")]),a._v(" "),e("ul",[e("li",[a._v("Number;")]),a._v(" "),e("li",[a._v("Strine;")]),a._v(" "),e("li",[a._v("Boolean;")]),a._v(" "),e("li",[a._v("Symbol;")])]),a._v(" "),e("h4",{attrs:{id:"它们被称作包装类型。所以我们要认识到3与new-number-3-是完全不同的值-他们一个是number类型-一个是对象类型。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#它们被称作包装类型。所以我们要认识到3与new-number-3-是完全不同的值-他们一个是number类型-一个是对象类型。"}},[a._v("#")]),a._v(" 它们被称作"),e("strong",[a._v("包装类型")]),a._v("。所以我们要认识到3与new Number(3)是完全不同的值，他们一个是Number类型，一个是对象类型。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("true === new Boolean(true); // false\n3 === new Number(3); // false\n'str' === new String('str'); // false\nconsole.log(typeof new String('str')); // object\nconsole.log(typeof 'str'); // string\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("h4",{attrs:{id:"number、string-和-boolean-三个构造器是两用的-当跟-new-搭配时-它们产生对象-当直接调用时-它们表示强制类型转换。symbol-函数比较特殊-直接用-new-调用它会抛出错误-但它仍然是-symbol-对象的构造器。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#number、string-和-boolean-三个构造器是两用的-当跟-new-搭配时-它们产生对象-当直接调用时-它们表示强制类型转换。symbol-函数比较特殊-直接用-new-调用它会抛出错误-但它仍然是-symbol-对象的构造器。"}},[a._v("#")]),a._v(" Number、String 和 Boolean，三个构造器是两用的，当跟 new 搭配时，它们产生对象，当直接调用时，它们表示强制类型转换。Symbol 函数比较特殊，直接用 new 调用它会抛出错误，但它仍然是 Symbol 对象的构造器。")]),a._v(" "),e("h4",{attrs:{id:"所以-当运算符提供了装箱操作-它会根据基础类型构造一个临时对象-使得我们能在基础类型上调用对应对象的方法。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#所以-当运算符提供了装箱操作-它会根据基础类型构造一个临时对象-使得我们能在基础类型上调用对应对象的方法。"}},[a._v("#")]),a._v(" 所以，当运算符提供了装箱操作，它会根据基础类型构造一个临时对象，使得我们能在基础类型上调用对应对象的方法。")]),a._v(" "),e("h2",{attrs:{id:"类型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[a._v("#")]),a._v(" 类型转换")]),a._v(" "),e("h4",{attrs:{id:"直接上图吧。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#直接上图吧。"}},[a._v("#")]),a._v(" 直接上图吧。")]),a._v(" "),e("p",[e("img",{attrs:{src:t(515),alt:"'类型转换'"}})]),a._v(" "),e("h4",{attrs:{id:"其中较为复杂的部分是number和strine之间的转换-以及对象和基本类型之间的转换。下面来讲一下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其中较为复杂的部分是number和strine之间的转换-以及对象和基本类型之间的转换。下面来讲一下"}},[a._v("#")]),a._v(" 其中较为复杂的部分是Number和Strine之间的转换，以及对象和基本类型之间的转换。下面来讲一下")]),a._v(" "),e("h3",{attrs:{id:"stringtonumber"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stringtonumber"}},[a._v("#")]),a._v(" StringToNumber")]),a._v(" "),e("h4",{attrs:{id:"字符串到数字的转换-存在一个语法结构-类型转换支持十进制、二进制、八进制和十六进制、并且支持的字符串语法还能包含正负括号科学计数法-可以使用大写或者小写的e来表示。比如"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串到数字的转换-存在一个语法结构-类型转换支持十进制、二进制、八进制和十六进制、并且支持的字符串语法还能包含正负括号科学计数法-可以使用大写或者小写的e来表示。比如"}},[a._v("#")]),a._v(" 字符串到数字的转换，存在一个语法结构，类型转换支持十进制、二进制、八进制和十六进制、并且支持的字符串语法还能包含正负括号科学计数法，可以使用大写或者小写的e来表示。比如：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("Number('30'); // 30\nNumber('0b111'); // 7\nNumber('0o13'); // 11\nNumber('0xFF'); // 255\nNumber('1e3'); // 1000\nNumber('-1e-2'); // -0.01\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("h3",{attrs:{id:"numbertostring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#numbertostring"}},[a._v("#")]),a._v(" NumberToString")]),a._v(" "),e("h4",{attrs:{id:"在较小的范围内-数字到字符串的转换完全是符合直觉的十进制转换结果。但是当number的绝对值较大或者较小时-字符串表示则是使用科学计数法表示的。目的是为了保证产生的字符串不会过长。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在较小的范围内-数字到字符串的转换完全是符合直觉的十进制转换结果。但是当number的绝对值较大或者较小时-字符串表示则是使用科学计数法表示的。目的是为了保证产生的字符串不会过长。"}},[a._v("#")]),a._v(" 在较小的范围内，数字到字符串的转换完全是符合直觉的十进制转换结果。但是当Number的绝对值较大或者较小时，字符串表示则是使用科学计数法表示的。目的是为了保证产生的字符串不会过长。")]),a._v(" "),e("h3",{attrs:{id:"装箱转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#装箱转换"}},[a._v("#")]),a._v(" 装箱转换")]),a._v(" "),e("h4",{attrs:{id:"一种基本类型-number、string、boolean、symbol-在对象中都有对应的构造函数-装箱转换就是把基本类型转换为对应的对象。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一种基本类型-number、string、boolean、symbol-在对象中都有对应的构造函数-装箱转换就是把基本类型转换为对应的对象。"}},[a._v("#")]),a._v(" 一种基本类型 Number、String、Boolean、Symbol 在对象中都有对应的构造函数，装箱转换就是把基本类型转换为对应的对象。")]),a._v(" "),e("h3",{attrs:{id:"拆箱转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拆箱转换"}},[a._v("#")]),a._v(" 拆箱转换")]),a._v(" "),e("h4",{attrs:{id:"在-javascript-标准中-规定了-toprimitive-函数-它是对象类型到基本类型的转换-即-拆箱转换-。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-javascript-标准中-规定了-toprimitive-函数-它是对象类型到基本类型的转换-即-拆箱转换-。"}},[a._v("#")]),a._v(" 在 JavaScript 标准中，规定了 ToPrimitive 函数，它是对象类型到基本类型的转换（即，拆箱转换）。")]),a._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),e("h4",{attrs:{id:"在本篇文章中-学习了-javascript-运行时的类型系统和类型转换-除了这七种语言类型-还有一些语言的实现者需要关心的规范类型。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在本篇文章中-学习了-javascript-运行时的类型系统和类型转换-除了这七种语言类型-还有一些语言的实现者需要关心的规范类型。"}},[a._v("#")]),a._v(" 在本篇文章中，学习了 JavaScript 运行时的类型系统和类型转换，除了这七种语言类型，还有一些语言的实现者需要关心的规范类型。")]),a._v(" "),e("h4",{attrs:{id:"参考相关文章链接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考相关文章链接"}},[a._v("#")]),a._v(" 参考相关文章链接：")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://time.geekbang.org/column/article/77749",target:"_blank",rel:"noopener noreferrer"}},[a._v("重学前端-winter"),e("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);