(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{517:function(t,a,e){t.exports=e.p+"assets/img/stat-type-completion.46da9261.png"},563:function(t,a,e){"use strict";e.r(a);var s=e(3),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("h3",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("h4",{attrs:{id:"本篇文章主要是重塑javascript的第八篇-本篇内容在javascript的语句执行的原理-以及是如何利用这些实现中断-跳出等逻辑的。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本篇文章主要是重塑javascript的第八篇-本篇内容在javascript的语句执行的原理-以及是如何利用这些实现中断-跳出等逻辑的。"}},[t._v("#")]),t._v(" 本篇文章主要是重塑JavaScript的第八篇，本篇内容在JavaScript的语句执行的原理,以及是如何利用这些实现中断,跳出等逻辑的。")])]),s("h2",{attrs:{id:"语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语句"}},[t._v("#")]),t._v(" 语句")]),t._v(" "),s("h4",{attrs:{id:"语句是任何编程语言的基础-常见的语句-变量声明、表达式、条件、循环等。这些是构成代码逻辑的基础-那么语句的值和它的运行时机制的规则到底是什么样子的呢-咱们举一个例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语句是任何编程语言的基础-常见的语句-变量声明、表达式、条件、循环等。这些是构成代码逻辑的基础-那么语句的值和它的运行时机制的规则到底是什么样子的呢-咱们举一个例子"}},[t._v("#")]),t._v(" 语句是任何编程语言的基础，常见的语句，变量声明、表达式、条件、循环等。这些是构成代码逻辑的基础，那么语句的值和它的运行时机制的规则到底是什么样子的呢?   咱们举一个例子：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function foo() {\n  try {\n    return 0;\n  } catch (err) {\n  } finally{\n    console.log('a');\n  }\n}\nconsole.log(foo());\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h4",{attrs:{id:"执行上面的代码可以发现-try中的return执行后并没有直接结束函数foo的执行-而是会进入到finally-继续执行finally里面的代码-输出了-a-最终仍然是返回0-这种运行顺序不免有些让人疑惑-但这其中肯定有一种运行机制存在。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上面的代码可以发现-try中的return执行后并没有直接结束函数foo的执行-而是会进入到finally-继续执行finally里面的代码-输出了-a-最终仍然是返回0-这种运行顺序不免有些让人疑惑-但这其中肯定有一种运行机制存在。"}},[t._v("#")]),t._v(" 执行上面的代码可以发现，try中的return执行后并没有直接结束函数foo的执行，而是会进入到finally，继续执行finally里面的代码，输出了'a'，最终仍然是返回0，这种运行顺序不免有些让人疑惑，但这其中肯定有一种运行机制存在。")]),t._v(" "),s("h4",{attrs:{id:"我们再来抽象的思考一下-按照我们之前讲的上下文中-每一个上下文中不仅仅有函数的调用-还有很多for循环、if条件判断等-这些代码的执行也都是同步的一步步进行。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我们再来抽象的思考一下-按照我们之前讲的上下文中-每一个上下文中不仅仅有函数的调用-还有很多for循环、if条件判断等-这些代码的执行也都是同步的一步步进行。"}},[t._v("#")]),t._v(" 我们再来抽象的思考一下，按照我们之前讲的上下文中，每一个上下文中不仅仅有函数的调用，还有很多for循环、if条件判断等，这些代码的执行也都是同步的一步步进行。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var arr = ['a', 'b', 'c', 'd', 'e'];\nfor(var i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n  if(i === 2) {break;}\n}\nconsole.log('end');\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h4",{attrs:{id:"最后的console-log-end-事在何时知道for循环已经结束的-肯定得有一个讯号表示每个语句得状态-也就是我们之前在类型篇说过的规范类型completion-record。它来解释值和控制流的运行时传播。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最后的console-log-end-事在何时知道for循环已经结束的-肯定得有一个讯号表示每个语句得状态-也就是我们之前在类型篇说过的规范类型completion-record。它来解释值和控制流的运行时传播。"}},[t._v("#")]),t._v(" 最后的console.log('end')事在何时知道for循环已经结束的？肯定得有一个讯号表示每个语句得状态，也就是我们之前在类型篇说过的规范类型Completion Record。它来解释值和控制流的运行时传播。")]),t._v(" "),s("h4",{attrs:{id:"ecmascript规范中的每个运行时语义都显式或隐式返回一个completion-record-用于表示语句的运行时结果。可以用一个对象来描述-有三个字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript规范中的每个运行时语义都显式或隐式返回一个completion-record-用于表示语句的运行时结果。可以用一个对象来描述-有三个字段"}},[t._v("#")]),t._v(" ECMAScript规范中的每个运行时语义都显式或隐式返回一个Completion Record，用于表示语句的运行时结果。可以用一个对象来描述，有三个字段：")]),t._v(" "),s("p",[t._v("1.[[type]]，表示完成的类型，有normal，break，continue，return，throw 5种类型；"),s("br"),t._v("\n2.[[value]]，表示语句的返回值，如果语句没有，则返回空empty;"),s("br"),t._v("\n3.[[target]]，定向控制转移的目标标签，仅当[[type]]为break，continue时有值。")]),t._v(" "),s("h2",{attrs:{id:"语句的分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语句的分类"}},[t._v("#")]),t._v(" 语句的分类")]),t._v(" "),s("h4",{attrs:{id:"上面介绍了javascript是依靠语句的completion-record类型来实现语句的各种流程控制的。那么我们按照它的执行特点对语句进行分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上面介绍了javascript是依靠语句的completion-record类型来实现语句的各种流程控制的。那么我们按照它的执行特点对语句进行分类"}},[t._v("#")]),t._v(" 上面介绍了JavaScript是依靠语句的Completion Record类型来实现语句的各种流程控制的。那么我们按照它的执行特点对语句进行分类：")]),t._v(" "),s("p",[s("img",{attrs:{src:e(517),alt:"stat-type-completion"}})]),t._v(" "),s("h3",{attrs:{id:"普通语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通语句"}},[t._v("#")]),t._v(" 普通语句")]),t._v(" "),s("h4",{attrs:{id:"普通语句主要是声明类语句、表达式语句、空语句及debugger语句。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通语句主要是声明类语句、表达式语句、空语句及debugger语句。"}},[t._v("#")]),t._v(" 普通语句主要是声明类语句、表达式语句、空语句及debugger语句。")]),t._v(" "),s("h4",{attrs:{id:"这些语句的特点是在他们执行后-会得到-type-为noraml的completion-record-javascript引擎遇到这样的completion-record-会继续执行下一条语句-而不会有其它的控制操作。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#这些语句的特点是在他们执行后-会得到-type-为noraml的completion-record-javascript引擎遇到这样的completion-record-会继续执行下一条语句-而不会有其它的控制操作。"}},[t._v("#")]),t._v(" 这些语句的特点是在他们执行后，会得到[[type]]为noraml的Completion Record，JavaScript引擎遇到这样的Completion Record，会继续执行下一条语句，而不会有其它的控制操作。")]),t._v(" "),s("h4",{attrs:{id:"这些语句中-也只有表达式语句才会产生-value-的值-value-值在这里说一下-在规范中-它是statementlist最后一个产生值得语句得值。比如说"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#这些语句中-也只有表达式语句才会产生-value-的值-value-值在这里说一下-在规范中-它是statementlist最后一个产生值得语句得值。比如说"}},[t._v("#")]),t._v(" 这些语句中，也"),s("strong",[t._v("只有表达式语句才会产生[[value]]的值")]),t._v("，[[value]]值在这里说一下，在规范中，它是StatementList最后一个产生值得语句得值。比如说：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('eval("1;;;;;"); // 1\neval("1;{}"); // 1\neval("1;var a;") // 1\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h4",{attrs:{id:"示例得第一个是表达式语句1和四个空语句-组成-而空语句得-value-是empty-所以这个语句得值就是1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例得第一个是表达式语句1和四个空语句-组成-而空语句得-value-是empty-所以这个语句得值就是1"}},[t._v("#")]),t._v(" 示例得第一个是表达式语句1和四个空语句"),s("code",[t._v("；")]),t._v("组成，而空语句得[[value]]是empty，所以这个语句得值就是1；")]),t._v(" "),s("h4",{attrs:{id:"示例的第二个-看起来结果应该是-但是-实际上代表的是空的代码块-这一点在后面会说-而该语句结果也为empty-因此结果是1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例的第二个-看起来结果应该是-但是-实际上代表的是空的代码块-这一点在后面会说-而该语句结果也为empty-因此结果是1"}},[t._v("#")]),t._v(" 示例的第二个，看起来结果应该是{}，但是{}实际上代表的是空的代码块，这一点在后面会说，而该语句结果也为empty，因此结果是1；")]),t._v(" "),s("h4",{attrs:{id:"示例得第三项-就和第一项差不多得意思啦-变量声明也是没有-value-的。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例得第三项-就和第一项差不多得意思啦-变量声明也是没有-value-的。"}},[t._v("#")]),t._v(" 示例得第三项，就和第一项差不多得意思啦，变量声明也是没有[[value]]的。")]),t._v(" "),s("h4",{attrs:{id:"另外说一下-由于empty并不是javascript语言的一部分-因此我们在执行类似eval-var-a-1-得到的结果是undefined。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#另外说一下-由于empty并不是javascript语言的一部分-因此我们在执行类似eval-var-a-1-得到的结果是undefined。"}},[t._v("#")]),t._v(" 另外说一下，由于empty并不是JavaScript语言的一部分，因此我们在执行类似eval('var a = 1;\")得到的结果是undefined。")]),t._v(" "),s("h3",{attrs:{id:"语句块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语句块"}},[t._v("#")]),t._v(" 语句块")]),t._v(" "),s("h4",{attrs:{id:"语句块实际上就是使用-包裹起来的语句-不是声明对象的词法写法。在语句块中可以嵌套其他的语句。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语句块实际上就是使用-包裹起来的语句-不是声明对象的词法写法。在语句块中可以嵌套其他的语句。"}},[t._v("#")]),t._v(" 语句块实际上就是使用{}包裹起来的语句，不是声明对象的词法写法。在语句块中可以嵌套其他的语句。")]),t._v(" "),s("h4",{attrs:{id:"语句块内部的语句的completion-record的-type-如果不为normal-那么会中断语句块后续的执行。语句块的值是里面statementlist最后一个产生值得语句得值。比如"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语句块内部的语句的completion-record的-type-如果不为normal-那么会中断语句块后续的执行。语句块的值是里面statementlist最后一个产生值得语句得值。比如"}},[t._v("#")]),t._v(" 语句块内部的语句的Completion Record的[[type]]如果不为normal，那么会中断语句块后续的执行。语句块的值是里面StatementList最后一个产生值得语句得值。比如：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("{\n  var i = 1; // normal, empty, empty\n  i++; // normal, 1, empty  \n  i = i + 1; // normal, 3, empty\n} // normal， 3， empty\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h4",{attrs:{id:"在控制台得结果是3。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在控制台得结果是3。"}},[t._v("#")]),t._v(" 在控制台得结果是3。")]),t._v(" "),s("h3",{attrs:{id:"控制型语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#控制型语句"}},[t._v("#")]),t._v(" 控制型语句")]),t._v(" "),s("h4",{attrs:{id:"控制性语句是有自己独特得执行流程得语句-在遇到不同得-type-的completion-record的时候会产生不同的效果。。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#控制性语句是有自己独特得执行流程得语句-在遇到不同得-type-的completion-record的时候会产生不同的效果。。"}},[t._v("#")]),t._v(" 控制性语句是有自己独特得执行流程得语句，在遇到不同得[[type]]的Completion Record的时候会产生不同的效果。。")]),t._v(" "),s("h4",{attrs:{id:"我们根据影响的范围不同-把控制语句分为两类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我们根据影响的范围不同-把控制语句分为两类"}},[t._v("#")]),t._v(" 我们根据影响的范围不同，把控制语句分为两类：")]),t._v(" "),s("p",[t._v("1.对内部造成影响的语句，if，switch，for，while，try；"),s("br"),t._v("\n2.对外部造成影响的语句，break，continue，throw，return；\n这两类代码结合在一起就可以实现编程所需要的不同效果。通常我们使用起来都是for/while的循环语句对应break。continue使用，try和throw使用，function和return使用。但是在代码中，书写时很随意的，任意的两两配对JavaScript引擎该如何处理，大概列出了一个表图；")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("break")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("continue")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("return")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("throw")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("if")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("穿透")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("穿透")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("穿透")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("穿透")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("switch")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("消费")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("穿透")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("穿透")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("穿透")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("for/while")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("消费")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("消费")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("穿透")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("穿透")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("function")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("报错")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("报错")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("消费")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("穿透")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("try")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("特殊处理")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("特殊处理")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("特殊处理")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("消费")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("catch")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("特殊处理")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("特殊处理")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("特殊处理")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("穿透")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("finally")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("特殊处理")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("特殊处理")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("特殊处理")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("穿透")])])])]),t._v(" "),s("h4",{attrs:{id:"这里有两个术语-穿透和消费-带入代码中去理解一下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#这里有两个术语-穿透和消费-带入代码中去理解一下"}},[t._v("#")]),t._v(" 这里有两个术语，穿透和消费，带入代码中去理解一下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function fn() {\n  for (var i = 0; i < 5; i++) {\n    if (i === 2) { break; }\n    console.log(i);\n  }\n  switch(1) {\n    case 1: \n    console.log('switch end');\n    return 'switch return';\n  }\n  console.log('fn end');\n  return 'function return';\n}\nconsole.log(fn());\n// 结果0，1， 'switch end'， 'switch return'\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("h4",{attrs:{id:"就上面的图标规则来分析一下这一段代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#就上面的图标规则来分析一下这一段代码"}},[t._v("#")]),t._v(" 就上面的图标规则来分析一下这一段代码：")]),t._v(" "),s("p",[t._v("1.执行函数fn后，进入for循环，当遇到break控制语句后，和for的关系是消费，那么结束for循环，执行之后的代码；"),s("br"),t._v("\n2.进入switch语句，进入case 1，遇到return控制语句，它和switch的关系是穿透，即继续往上找能消费的语句，找到function，消费掉return；"),s("br"),t._v("\n3.由于fn调用被结束，返回switch return，switch的后续代码也不需要执行了。")]),t._v(" "),s("h4",{attrs:{id:"修改一下文章开头的例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改一下文章开头的例子"}},[t._v("#")]),t._v(" 修改一下文章开头的例子：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function foo() {\n  try {\n    return 0;\n  } catch(err) {}\n  finally {\n    return 1;\n  }\n}\nconsole.log(foo()); // 1\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h4",{attrs:{id:"在这个函数foo中有两个return语句-但是在遇到第一个return函数调用并没有结束。当try或者catch语句中遇到return后-无论怎么还是会执行finally中的内容-而如果finally中的结果是一个非normal类型的完成记录-则会作为try语句中的结果。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在这个函数foo中有两个return语句-但是在遇到第一个return函数调用并没有结束。当try或者catch语句中遇到return后-无论怎么还是会执行finally中的内容-而如果finally中的结果是一个非normal类型的完成记录-则会作为try语句中的结果。"}},[t._v("#")]),t._v(" 在这个函数foo中有两个return语句，但是在遇到第一个return函数调用并没有结束。当try或者catch语句中遇到return后，无论怎么还是会执行finally中的内容，而如果finally中的结果是一个非normal类型的完成记录，则会作为try语句中的结果。")]),t._v(" "),s("h3",{attrs:{id:"带标签的语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带标签的语句"}},[t._v("#")]),t._v(" 带标签的语句")]),t._v(" "),s("h4",{attrs:{id:"标签语言的使用比较少见-它的由来是叫做goto语句-在basic语言还很流行的时代-它为每行代码提供一个标号-就i是一种-行号类型-与条件语句配合使用。可用来实现条件转移-构成循环-跳出循环体等功能。-如"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标签语言的使用比较少见-它的由来是叫做goto语句-在basic语言还很流行的时代-它为每行代码提供一个标号-就i是一种-行号类型-与条件语句配合使用。可用来实现条件转移-构成循环-跳出循环体等功能。-如"}},[t._v("#")]),t._v(" 标签语言的使用比较少见，它的由来是叫做GOTO语句，在Basic语言还很流行的时代，它为每行代码提供一个标号，就i是一种”行号类型“，与条件语句配合使用。可用来实现条件转移，构成循环，跳出循环体等功能。 如：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('10 INPUT "What is your name: ", U$\n20 PRINT "Hello "; U$\n30 INPUT "How many stars do you want: ", N\n40 S$ = ""\n50 FOR I = 1 TO N\n60 S$ = S$ + "*"\n70 NEXT I\n80 PRINT S$\n90 INPUT "Do you want more stars? ", A$\n100 IF LEN(A$) = 0 THEN GOTO 90\n110 A$ = LEFT$(A$, 1)\n120 IF A$ = "Y" OR A$ = "y" THEN GOTO 30\n130 PRINT "Goodbye "; U$\n140 END\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("h4",{attrs:{id:"由于这种类型的basic程序的写法-很容易滥用goto的跳跃指令-以及代码没有办法使用到缩进去区分区段-因此很容易导致面条式代码-所以后面采用了-结构化-的代码方式。这也就诞生了我们控制语句之间的变化-也诞生了一种可以中断任意的标签化语句-的方式。我们可以通过在语句前加上标签名和-的方式加入标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#由于这种类型的basic程序的写法-很容易滥用goto的跳跃指令-以及代码没有办法使用到缩进去区分区段-因此很容易导致面条式代码-所以后面采用了-结构化-的代码方式。这也就诞生了我们控制语句之间的变化-也诞生了一种可以中断任意的标签化语句-的方式。我们可以通过在语句前加上标签名和-的方式加入标签"}},[t._v("#")]),t._v(" 由于这种类型的Basic程序的写法，很容易滥用GOTO的跳跃指令，以及代码没有办法使用到缩进去区分区段，因此很容易导致面条式代码，所以后面采用了”结构化“的代码方式。这也就诞生了我们控制语句之间的变化，也诞生了一种可以中断任意的标签化语句”的方式。我们可以通过在语句前加上标签名和"),s("code",[t._v("：")]),t._v("的方式加入标签：")]),t._v(" "),s("blockquote",[s("p",[t._v("firstStatement： var i = 1;")])]),t._v(" "),s("h4",{attrs:{id:"大部分时候-这个东西类似与注释-没有任何用处。唯一有作用的时候是-与完成记录类型中的target相配合-用于跳出多层循环。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大部分时候-这个东西类似与注释-没有任何用处。唯一有作用的时候是-与完成记录类型中的target相配合-用于跳出多层循环。"}},[t._v("#")]),t._v(" 大部分时候，这个东西类似与注释，没有任何用处。唯一有作用的时候是：与完成记录类型中的target相配合，用于跳出多层循环。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("outer： while (true) {\n  inner: while(true) {\n    break outer;\n  }\n  console.log('outer end')；\n}\nconsole.log('finished')；\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h4",{attrs:{id:"输出的结果只有-finished-并没有-outer-end-break-continue如果后面跟的有关键字-会产生带target的完成记录。一旦完成记录带了target-那么只有对应label的循环语句才能消费。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输出的结果只有-finished-并没有-outer-end-break-continue如果后面跟的有关键字-会产生带target的完成记录。一旦完成记录带了target-那么只有对应label的循环语句才能消费。"}},[t._v("#")]),t._v(" 输出的结果只有'finished'并没有'outer end'， break/continue如果后面跟的有关键字，会产生带target的完成记录。一旦完成记录带了target，那么只有对应label的循环语句才能消费。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("h4",{attrs:{id:"通过本篇的学习-认识到javascript在执行语句的时候是如何处理的逻辑-关于语句的值-我们可以在游览器开发者工具中进行查看-或者执行eval。了解了控制语句的规则后-也知道了一些比较生僻的语句跳转原因。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过本篇的学习-认识到javascript在执行语句的时候是如何处理的逻辑-关于语句的值-我们可以在游览器开发者工具中进行查看-或者执行eval。了解了控制语句的规则后-也知道了一些比较生僻的语句跳转原因。"}},[t._v("#")]),t._v(" 通过本篇的学习，认识到JavaScript在执行语句的时候是如何处理的逻辑，关于语句的值，我们可以在游览器开发者工具中进行查看，或者执行eval。了解了控制语句的规则后，也知道了一些比较生僻的语句跳转原因。")])])}),[],!1,null,null,null);a.default=r.exports}}]);