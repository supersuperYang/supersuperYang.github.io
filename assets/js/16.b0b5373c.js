(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{545:function(t,n,a){t.exports=a.p+"assets/img/HTTP-base-img.ce2709a8.png"},546:function(t,n,a){t.exports=a.p+"assets/img/HTTP-structure.ee42f402.png"},601:function(t,n,a){"use strict";a.r(n);var s=a(3),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("h4",{attrs:{id:"_2020年初-疫情十分严重-在家里玩了一段时间-今天有空-来学习一下通信协议方面的知识-然后记录下来-抄录下来-在此希望疫情早点过去-不再有人伤亡。愿一切平安。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2020年初-疫情十分严重-在家里玩了一段时间-今天有空-来学习一下通信协议方面的知识-然后记录下来-抄录下来-在此希望疫情早点过去-不再有人伤亡。愿一切平安。"}},[t._v("#")]),t._v(" 2020年初，疫情十分严重，在家里玩了一段时间，今天有空，来学习一下通信协议方面的知识，然后记录下来，(抄录下来)，在此希望疫情早点过去，不再有人伤亡。愿一切平安。")]),t._v(" "),s("h4",{attrs:{id:"网上冲过浪的朋友-当你们输入一个地址按下回车后-游览器是通过什么跳转到你想搜索的地址呢-这就是有关通信协议方面的知识。也是页面渲染的第一大不-了解它-对于我们前端代码排错很有帮助。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网上冲过浪的朋友-当你们输入一个地址按下回车后-游览器是通过什么跳转到你想搜索的地址呢-这就是有关通信协议方面的知识。也是页面渲染的第一大不-了解它-对于我们前端代码排错很有帮助。"}},[t._v("#")]),t._v(" 网上冲过浪的朋友，当你们输入一个地址按下回车后，游览器是通过什么跳转到你想搜索的地址呢？这就是有关通信协议方面的知识。也是页面渲染的第一大不，了解它，对于我们前端代码排错很有帮助。")])]),s("h4",{attrs:{id:"游览器打开一个页面首先要做的事情是-dns域名解析-然后根据url把数据取回来-取回数据通常使用的是http协议。或者在我们的页面中-与服务端产生一个交互-也可以利用http协议获取我们需要的信息。关于http协议是什么-以及它相关括展的知识-接下来展开一个基于前端层面的学习。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#游览器打开一个页面首先要做的事情是-dns域名解析-然后根据url把数据取回来-取回数据通常使用的是http协议。或者在我们的页面中-与服务端产生一个交互-也可以利用http协议获取我们需要的信息。关于http协议是什么-以及它相关括展的知识-接下来展开一个基于前端层面的学习。"}},[t._v("#")]),t._v(" 游览器打开一个页面首先要做的事情是 DNS域名解析，然后根据URL把数据取回来，取回数据通常使用的是HTTP协议。或者在我们的页面中，与服务端产生一个交互，也可以利用HTTP协议获取我们需要的信息。关于HTTP协议是什么，以及它相关括展的知识，接下来展开一个基于前端层面的学习。")]),t._v(" "),s("h2",{attrs:{id:"计算机网络结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络结构"}},[t._v("#")]),t._v(" 计算机网络结构")]),t._v(" "),s("h4",{attrs:{id:"http实际上就是一种互联网协议-在要具体知道它是什么之前-我们还得认识一下计算机网络的结构分层。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http实际上就是一种互联网协议-在要具体知道它是什么之前-我们还得认识一下计算机网络的结构分层。"}},[t._v("#")]),t._v(" HTTP实际上就是一种互联网协议，在要具体知道它是什么之前，我们还得认识一下计算机网络的结构分层。")]),t._v(" "),s("table",{staticStyle:{"text-align":"center"}},[s("thead",[s("tr",[s("th",[t._v("\n        OSI七层模型\n      ")]),t._v(" "),s("th",[t._v("\n        TCP/IP协议族层次\n      ")]),t._v(" "),s("th",[t._v("\n        功能\n      ")]),t._v(" "),s("th",[t._v("\n        五层协议的学习结构\n      ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("应用层")]),t._v(" "),s("td",{attrs:{rowspan:"3"}},[t._v("应用层")]),t._v(" "),s("td",[t._v("电子邮件、远程传输、文件传输")]),t._v(" "),s("td",[t._v("应用层")])]),t._v(" "),s("tr",[s("td",[t._v("\n        表示层\n      ")]),t._v(" "),s("td",[t._v("数据格式化、代码转换、数据加密")])]),t._v(" "),s("tr",[s("td",[t._v("会话层")]),t._v(" "),s("td",[t._v("解除或建立别的节点的联系")])]),t._v(" "),s("tr",[s("td",[t._v("\n        传输层\n      ")]),t._v(" "),s("td",[t._v("\n        传输层\n      ")]),t._v(" "),s("td",[t._v("\n        提供端对端的接口，处理端到端的通信细节\n      ")]),t._v(" "),s("td",[t._v("传输层")])]),t._v(" "),s("tr",[s("td",[t._v("\n        网络层\n      ")]),t._v(" "),s("td",[t._v("\n        网络层\n      ")]),t._v(" "),s("td",[t._v("\n        数据在网络中分组传输，网络层处理分组再网络中的活动\n      ")]),t._v(" "),s("td",[t._v("\n        网络层\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        数据链路层\n      ")]),t._v(" "),s("td",{attrs:{rowspan:"2"}},[t._v("\n        链路层\n      ")]),t._v(" "),s("td",[t._v("\n        传输有地址的帧和错误检测功能\n      ")]),t._v(" "),s("td",[t._v("\n        数据链路层\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        物理层\n      ")]),t._v(" "),s("td",[t._v("\n        以二进制数据形式在物理媒体上传输数据\n      ")]),t._v(" "),s("td",[t._v("\n        物理层\n      ")])])])]),t._v(" "),s("h4",{attrs:{id:"上面表格中的是osi和tcp-ip两种结构模型。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上面表格中的是osi和tcp-ip两种结构模型。"}},[t._v("#")]),t._v(" 上面表格中的是OSI和TCP/IP两种结构模型。")]),t._v(" "),s("ul",[s("li",[t._v("OSI(Open System Interconnect)，是ISO(国际标准化组织)组织在1985年研究的网络互联模型。为了更好的使网络应用更为普及，推荐所有公司使用这个规范来控制网络。它是学术上和法律上的国际标准，是完整的权威的网络参考模型。")]),t._v(" "),s("li",[t._v("TCP/IP参考模型是事实上的国际标准，即现实生活中被广泛使用的网络参考模型。究其原因可以看一下Andrew S.Tanenbaum的《计算机网络》。")])]),t._v(" "),s("h4",{attrs:{id:"不同的结构模型标准只是划分不同-在实现上可能封装不同。但实际上是一个东西。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同的结构模型标准只是划分不同-在实现上可能封装不同。但实际上是一个东西。"}},[t._v("#")]),t._v(" 不同的结构模型标准只是划分不同，在实现上可能封装不同。但实际上是一个东西。")]),t._v(" "),s("h4",{attrs:{id:"这里学习的方式-采用了一种五层的体系结构-中和了他们两者的有点-即表格中的最后一列。越往下面层越接近硬件-越往上的层越靠近用户。每一层都有他们自己的功能-并且都靠下一层支持-为了实现这些功能-就需要遵守共同的规则-大家遵守的规则-就是-协议-。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#这里学习的方式-采用了一种五层的体系结构-中和了他们两者的有点-即表格中的最后一列。越往下面层越接近硬件-越往上的层越靠近用户。每一层都有他们自己的功能-并且都靠下一层支持-为了实现这些功能-就需要遵守共同的规则-大家遵守的规则-就是-协议-。"}},[t._v("#")]),t._v(" 这里学习的方式，采用了一种五层的体系结构，中和了他们两者的有点，即表格中的最后一列。越往下面层越接近硬件，越往上的层越靠近用户。每一层都有他们自己的功能，并且都靠下一层支持，为了实现这些功能，就需要遵守共同的规则，大家遵守的规则，就是“协议”。")]),t._v(" "),s("h4",{attrs:{id:"互联网的每一层-都定义了很多协议-这些协议的总称-就叫做-互联网协议-它们是互联网的核心。下面按照五层结构从下往上对每一层的功能做简单介绍。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#互联网的每一层-都定义了很多协议-这些协议的总称-就叫做-互联网协议-它们是互联网的核心。下面按照五层结构从下往上对每一层的功能做简单介绍。"}},[t._v("#")]),t._v(" 互联网的每一层，都定义了很多协议，这些协议的总称，就叫做“互联网协议”，它们是互联网的核心。下面按照五层结构从下往上对每一层的功能做简单介绍。")]),t._v(" "),s("p",[t._v("1.物理层"),s("br"),t._v("\n物理层主要规定了网络的一些电气特性，它的作用就是负责传送0和1的电信号。"),s("br"),t._v("\n2.数据链路层"),s("br"),t._v("\n数据链路层的功能就是对0和1的数据进行分组。早期的时候，每个公司都有自己的电信号分组方式，后来，“以太网”(Ethernet)协议占据了主导地位。"),s("br"),t._v("\n以太网规定，一组电信号构成一个数据包，叫做“帧”(Frame)。每一帧分成两个部分：标头(Head)和数据(Data)。“标头”包含数据包的一些说明项，比如发送者、接收者、数据类型等等；“数据”则是数据包的具体内容。"),s("br"),t._v("\n那么标头中的发送者和接收者是如何标识的？"),s("br"),t._v("\n以太网规定，连入网络的所有设备，都必须具有“网卡”接口。数据包最终会从一块网卡传送到另一块网卡。二者两个网卡的地址，就叫做MAC地址，每一块网卡出厂的时候都有着独一无二的MAC地址。"),s("br"),t._v("\n既然每块网卡有了地址，那么如何传送？"),s("br"),t._v("\n以太网协议中，我们假设发送者已经知道了接收者的地址，它不是一对一的发送，而是对所在网络内所有计算机发送，然后每个计算机再进行判断，是否接收。就好像老师点人答题一样，喊出名字，同学们确定是不是自己，再决定起步起身。这种方式叫做“广播”。")]),t._v(" "),s("p",[t._v("3.网络层"),s("br"),t._v("\n理论上来讲，有了唯一的地址之后，任何两个地方的网卡之间就可以产生互通了。但是，考虑到广播的传输方式范围广效率低，而且局限在发送者所在的子网络。"),s("br"),t._v("\n互联网本身是一个巨型网络，由很多子网络所构成，因此，为了能够达到传输目的，我们必须要通过这唯一的MAC地址找到对应的子网络。如果是同一个子网络，就采用“广播”方式发送，否则就采用“路由”方式发送。但是MAC地址没办法办到。"),s("br"),t._v("\n于是，网络层诞生，引进了一种新的地址，用于判断不同的计算机是否在一个子网络中，这套地址就叫做“网络地址”，简称“网址”。至此每台计算机上有了两个地址，MAC地址和网路地址，但是它们之间没有任何联系。")]),t._v(" "),s("ul",[s("li",[t._v("网络地址则是管理原分配的，用于确定计算机所在的子网络；")]),t._v(" "),s("li",[t._v("MAC地址是绑定在网卡上的，用于传输数据包到子网络中的目标网卡。"),s("br"),t._v("\n两者是随机组合在一起，并且按照逻辑会先处理网络地址。")])]),t._v(" "),s("p",[t._v("4.传输层"),s("br"),t._v("\n好了，通过网络层建立的网络地址，加上MAC地址以及广播传递方式，我们已经可以定位到对方的计算机建立通信了。但是同时问题也来了，我们的通信是主机间的通信，但是一台主机上可能有很多的进程应用，比如微信，游览网页等。当一个数据包传递来的时候，如何确定到底是给哪个进程的？"),s("br"),t._v("\n这个时候就需要一个参数，用来区分数据包到进程的对应关系，这个参数也叫做“端口”，它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。"),s("br"),t._v("\n传输层的功能就是建立“端口到端口”间的通信。网络层实际上是建立“主机到主机”间的通信。有了主机和端口的通信，我们就可以实现程序间的交流了。")]),t._v(" "),s("p",[t._v("5.应用层"),s("br"),t._v("\n通信建立起来，计算机可以通过网路接收到各种数据包，对于各种各样的数据解读成了一个问题，因此必须事先规定好格式。"),s("br"),t._v("\n应用层的作用，就是用来规定应用程序的数据格式。比如，在传输层实现的各种程序之间的数据包传递，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了“应用层”。")]),t._v(" "),s("h4",{attrs:{id:"五层结构各自的功能基本上就是这些-http就是一个应用层的互联网协议-它是基于tcp协议出现的。tcp协议是作用在传输层的协议。而tcp协议的链接-依赖于网络层的ip协议。接下来-先重点从低到高把这三个协议内容学习一遍。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五层结构各自的功能基本上就是这些-http就是一个应用层的互联网协议-它是基于tcp协议出现的。tcp协议是作用在传输层的协议。而tcp协议的链接-依赖于网络层的ip协议。接下来-先重点从低到高把这三个协议内容学习一遍。"}},[t._v("#")]),t._v(" 五层结构各自的功能基本上就是这些，HTTP就是一个应用层的互联网协议，它是基于TCP协议出现的。TCP协议是作用在传输层的协议。而TCP协议的链接，依赖于网络层的IP协议。接下来，先重点从低到高把这三个协议内容学习一遍。")]),t._v(" "),s("h2",{attrs:{id:"ip协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ip协议"}},[t._v("#")]),t._v(" IP协议")]),t._v(" "),s("h4",{attrs:{id:"ip协议作用于网络层-网络层的目的是实现主机到主机的通信-而这一步-网络地址由32个二进制位组成。习惯上-我们用分成四段的十进制数表示ip地址-从0-0-0-0一直到255-255-255-255。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ip协议作用于网络层-网络层的目的是实现主机到主机的通信-而这一步-网络地址由32个二进制位组成。习惯上-我们用分成四段的十进制数表示ip地址-从0-0-0-0一直到255-255-255-255。"}},[t._v("#")]),t._v(" IP协议作用于网络层，网络层的目的是实现主机到主机的通信，而这一步，网络地址由32个二进制位组成。习惯上，我们用分成四段的十进制数表示IP地址，从0.0.0.0一直到255.255.255.255。")]),t._v(" "),s("h4",{attrs:{id:"但是ip协议是如何通过ip地址判断两台计算机同属一个子网络呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#但是ip协议是如何通过ip地址判断两台计算机同属一个子网络呢"}},[t._v("#")]),t._v(" 但是IP协议是如何通过IP地址判断两台计算机同属一个子网络呢？")]),t._v(" "),s("h4",{attrs:{id:"在ip地址中有一部分位数表示网络部分-一部分表示主机部分。具体的判断-还需要一个参数-子网掩码-它是表示子网络特征的一个参数-也是由32位二进制组成-它的网络部分全部为1-主机部分全部为0。如果已知网络部分是前24位-主机部分是后8位-那么子网络的掩码就是11111111-11111111-11111111-00000000-写成十进制就是255-255-255-0。在判断网络的时候-就通过两台计算机的子网掩码判断是否为网络部分-然后再用ip地址进行比较。确定是否在同一个子网络。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在ip地址中有一部分位数表示网络部分-一部分表示主机部分。具体的判断-还需要一个参数-子网掩码-它是表示子网络特征的一个参数-也是由32位二进制组成-它的网络部分全部为1-主机部分全部为0。如果已知网络部分是前24位-主机部分是后8位-那么子网络的掩码就是11111111-11111111-11111111-00000000-写成十进制就是255-255-255-0。在判断网络的时候-就通过两台计算机的子网掩码判断是否为网络部分-然后再用ip地址进行比较。确定是否在同一个子网络。"}},[t._v("#")]),t._v(" 在IP地址中有一部分位数表示网络部分，一部分表示主机部分。具体的判断 还需要一个参数“子网掩码”，它是表示子网络特征的一个参数，也是由32位二进制组成，它的网络部分全部为1，主机部分全部为0。如果已知网络部分是前24位，主机部分是后8位，那么子网络的掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。在判断网络的时候，就通过两台计算机的子网掩码判断是否为网络部分，然后再用IP地址进行比较。确定是否在同一个子网络。")]),t._v(" "),s("h2",{attrs:{id:"tcp协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议"}},[t._v("#")]),t._v(" TCP协议")]),t._v(" "),s("h4",{attrs:{id:"tcp协议是传输层的协议-传输层实现两台计算机中进程的通信-并提供通用的数据传输服务-在这里主要使用两种协议。一种是udp-一种是tcp。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议是传输层的协议-传输层实现两台计算机中进程的通信-并提供通用的数据传输服务-在这里主要使用两种协议。一种是udp-一种是tcp。"}},[t._v("#")]),t._v(" TCP协议是传输层的协议，传输层实现两台计算机中进程的通信，并提供通用的数据传输服务，在这里主要使用两种协议。一种是UDP，一种是TCP。")]),t._v(" "),s("h4",{attrs:{id:"udp-user-datagram-protocol-用户数据报协议-是一个非连接-面向报文的协议。udp的包非常简单-并且尽最大努力的数据传输服务-不保证数据传输的可靠性-。这里就不多做介绍了。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp-user-datagram-protocol-用户数据报协议-是一个非连接-面向报文的协议。udp的包非常简单-并且尽最大努力的数据传输服务-不保证数据传输的可靠性-。这里就不多做介绍了。"}},[t._v("#")]),t._v(" UDP(User Datagram Protocol， 用户数据报协议)，是一个非连接，面向报文的协议。UDP的包非常简单，并且尽最大努力的数据传输服务(不保证数据传输的可靠性)。这里就不多做介绍了。")]),t._v(" "),s("h4",{attrs:{id:"tcp-transmission-control-protocol-传输控制协议-是面向连接的协议-也就是说-在收发数据前-必须和对方建立可靠的连接。一个tcp连接必须要经过三次-对话-才能建立起来-其中的过程非常复杂-一般称作-三次握手-这里也只简单的描述下-以一个客户端和服务端交互为例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-transmission-control-protocol-传输控制协议-是面向连接的协议-也就是说-在收发数据前-必须和对方建立可靠的连接。一个tcp连接必须要经过三次-对话-才能建立起来-其中的过程非常复杂-一般称作-三次握手-这里也只简单的描述下-以一个客户端和服务端交互为例"}},[t._v("#")]),t._v(" TCP(Transmission Control Protocol，传输控制协议)是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来，其中的过程非常复杂，一般称作“三次握手”，这里也只简单的描述下，以一个客户端和服务端交互为例：")]),t._v(" "),s("ul",[s("li",[t._v("第一次握手：客户端将一个带有SYN标志的数据包传递给服务端；")]),t._v(" "),s("li",[t._v("第二次握手：服务端回应一个带有SYN/ACK标志的数据包给客户端；")]),t._v(" "),s("li",[t._v("第三次握手：客户端发送带有ACK标志的数据包给服务端。")])]),t._v(" "),s("h4",{attrs:{id:"这里的syn和ack不多做解释-理解上讲就是一种确定机制-我把我的小秘密写在纸条上给你-但是我怕你看不懂-请你再写一份告诉我你确实知道了这个小秘密。使用这两个标志来保证双方发送信息无误。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#这里的syn和ack不多做解释-理解上讲就是一种确定机制-我把我的小秘密写在纸条上给你-但是我怕你看不懂-请你再写一份告诉我你确实知道了这个小秘密。使用这两个标志来保证双方发送信息无误。"}},[t._v("#")]),t._v(" 这里的SYN和ACK不多做解释，理解上讲就是一种确定机制，我把我的小秘密写在纸条上给你，但是我怕你看不懂，请你再写一份告诉我你确实知道了这个小秘密。使用这两个标志来保证双方发送信息无误。")]),t._v(" "),s("h4",{attrs:{id:"至此三次握手完毕成功地建立连接-可以开始传输数据了。为啥要这么麻烦的做-三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#至此三次握手完毕成功地建立连接-可以开始传输数据了。为啥要这么麻烦的做-三次握手"}},[t._v("#")]),t._v(" 至此三次握手完毕成功地建立连接，可以开始传输数据了。为啥要这么麻烦的做“三次握手”？")]),t._v(" "),s("h4",{attrs:{id:"其实就是和syn和ack的目的一样-三次握手就是为了保证双方的发送和接收都没有问题。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其实就是和syn和ack的目的一样-三次握手就是为了保证双方的发送和接收都没有问题。"}},[t._v("#")]),t._v(" 其实就是和SYN和ACK的目的一样，三次握手就是为了保证双方的发送和接收都没有问题。")]),t._v(" "),s("ul",[s("li",[t._v("第一次握手，服务端可以确定客户端发送正常，自己接受正常。")]),t._v(" "),s("li",[t._v("第二次握手，客户端可以确定自己发送正常，接受正常，对方接受正常，发送正常；服务端可以确定自己接受正常，对方发送正常。")]),t._v(" "),s("li",[t._v("第三次握手，客户端可以确定自己发送正常，接受正常，对方接受正常，发送正常；服务端可以确定自己接收正常，发送正常；服务端可以确定自己接收正常，发送正常，对方发送正常，接收正常。")])]),t._v(" "),s("h4",{attrs:{id:"由此就可以确定双方的发送和接收都正常了。这里还要说明一下断开一个tcp连接需要-四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#由此就可以确定双方的发送和接收都正常了。这里还要说明一下断开一个tcp连接需要-四次挥手"}},[t._v("#")]),t._v(" 由此就可以确定双方的发送和接收都正常了。这里还要说明一下断开一个TCP连接需要“四次挥手”：")]),t._v(" "),s("ul",[s("li",[t._v("第一次挥手，客户端发送FIN，用来关闭客户端到服务端的数据传送；")]),t._v(" "),s("li",[t._v("第二次挥手，服务端返回一个ACK给客户端；")]),t._v(" "),s("li",[t._v("第三次挥手，服务端关闭与客户端的连接，发送一个FIN给客户端；")]),t._v(" "),s("li",[t._v("第四次挥手，客户端返回ACK报文确定。")])]),t._v(" "),s("h4",{attrs:{id:"fin就像是一个表示自己想要关闭的讯号。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fin就像是一个表示自己想要关闭的讯号。"}},[t._v("#")]),t._v(" FIN就像是一个表示自己想要关闭的讯号。")]),t._v(" "),s("h4",{attrs:{id:"这里有个问题-为什么连接只要三次-而断开需要四次"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#这里有个问题-为什么连接只要三次-而断开需要四次"}},[t._v("#")]),t._v(" 这里有个问题：为什么连接只要三次，而断开需要四次？")]),t._v(" "),s("h4",{attrs:{id:"tcp协议是一条双向的通讯通道-任何一方都可以主动断开连接-任何一方也有可能还没有发送完的信息。就比如两个人打电话-电话双方都可以讲话-也可以由一方来提出结束-但是对方可能没有讲完-需要双方都确定结束后-然后在挂断。在第一次和第二次挥手-相当于客户端通知服务端-我这边结束了-服务端表示我知道了。然后第三次和第四次挥手是服务端告诉客户端我这边也结束了-客户端接受到后确定双方都结束来了-告诉服务端-我知道了。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议是一条双向的通讯通道-任何一方都可以主动断开连接-任何一方也有可能还没有发送完的信息。就比如两个人打电话-电话双方都可以讲话-也可以由一方来提出结束-但是对方可能没有讲完-需要双方都确定结束后-然后在挂断。在第一次和第二次挥手-相当于客户端通知服务端-我这边结束了-服务端表示我知道了。然后第三次和第四次挥手是服务端告诉客户端我这边也结束了-客户端接受到后确定双方都结束来了-告诉服务端-我知道了。"}},[t._v("#")]),t._v(" TCP协议是一条双向的通讯通道，任何一方都可以主动断开连接，任何一方也有可能还没有发送完的信息。就比如两个人打电话，电话双方都可以讲话，也可以由一方来提出结束，但是对方可能没有讲完，需要双方都确定结束后，然后在挂断。在第一次和第二次挥手，相当于客户端通知服务端，我这边结束了，服务端表示我知道了。然后第三次和第四次挥手是服务端告诉客户端我这边也结束了，客户端接受到后确定双方都结束来了，告诉服务端 我知道了。")]),t._v(" "),s("h2",{attrs:{id:"http协议-0-9-1-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http协议-0-9-1-1"}},[t._v("#")]),t._v(" HTTP协议(0.9-1.1)")]),t._v(" "),s("h4",{attrs:{id:"在tcp连接建立后-就到了应用层-在这一层有多种协议规定应用程序的数据格式-对于我们最常见的就是http协议。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在tcp连接建立后-就到了应用层-在这一层有多种协议规定应用程序的数据格式-对于我们最常见的就是http协议。"}},[t._v("#")]),t._v(" 在TCP连接建立后，就到了应用层，在这一层有多种协议规定应用程序的数据格式，对于我们最常见的就是HTTP协议。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(545),alt:"HTTP-base-img.png"}})]),t._v(" "),s("h4",{attrs:{id:"http-hyper-text-transfer-protocol-超文本传输协议-看名字就知道是用于传输诸如html的超媒体文档的应用层协议。http协议是基于tcp协议出现的-在tcp的基础上-规定了request-response的模式。这个模式决定了通讯必定是由游览器端首先发起的-默认使用80端口。我们以它的几个关键版本的发展来学习。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-hyper-text-transfer-protocol-超文本传输协议-看名字就知道是用于传输诸如html的超媒体文档的应用层协议。http协议是基于tcp协议出现的-在tcp的基础上-规定了request-response的模式。这个模式决定了通讯必定是由游览器端首先发起的-默认使用80端口。我们以它的几个关键版本的发展来学习。"}},[t._v("#")]),t._v(" HTTP(Hyper Text Transfer Protocol 超文本传输协议)，看名字就知道是用于传输诸如HTML的超媒体文档的应用层协议。HTTP协议是基于TCP协议出现的，在TCP的基础上，规定了Request-Response的模式。这个模式决定了通讯必定是由游览器端首先发起的，默认使用80端口。我们以它的几个关键版本的发展来学习。")]),t._v(" "),s("h3",{attrs:{id:"http-0-9和http-1-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-0-9和http-1-0"}},[t._v("#")]),t._v(" HTTP/0.9和HTTP/1.0")]),t._v(" "),s("h4",{attrs:{id:"最早的版本是1991年发布的0-9版本-只支持get请求方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最早的版本是1991年发布的0-9版本-只支持get请求方式"}},[t._v("#")]),t._v(" 最早的版本是1991年发布的0.9版本,只支持GET请求方式:")]),t._v(" "),s("blockquote",[s("p",[t._v("GET /index.html")])]),t._v(" "),s("h4",{attrs:{id:"这个命令在tcp连接建立后-客户端向服务端请求-request-网页index-html。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#这个命令在tcp连接建立后-客户端向服务端请求-request-网页index-html。"}},[t._v("#")]),t._v(" 这个命令在TCP连接建立后,客户端向服务端请求(request)网页index.html。")]),t._v(" "),s("h4",{attrs:{id:"协议规定-服务器只能回应html格式的字符串-不能回应别的格式。并且具有无状态性-服务器发送完毕-就关闭tcp连接。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协议规定-服务器只能回应html格式的字符串-不能回应别的格式。并且具有无状态性-服务器发送完毕-就关闭tcp连接。"}},[t._v("#")]),t._v(" 协议规定，服务器只能回应HTML格式的字符串，不能回应别的格式。并且具有无状态性，服务器发送完毕，就关闭TCP连接。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<html>\n  <body>Hello World</body>\n</html>\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h4",{attrs:{id:"_1996年5月http-1-0版本发布-它增加了很多功能。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1996年5月http-1-0版本发布-它增加了很多功能。"}},[t._v("#")]),t._v(" 1996年5月HTTP/1.0版本发布，它增加了很多功能。")]),t._v(" "),s("ul",[s("li",[t._v("增加了指定HTTP协议版本号；")]),t._v(" "),s("li",[t._v("请求与响应支持添加头信息；")]),t._v(" "),s("li",[t._v("扩充了传输内容格式，图片、音视频资源、二进制等都可以进行传输；")]),t._v(" "),s("li",[t._v("开始支持客户端通过POST方法向服务端提交数据，支持GET、POST、HEAD方法；")]),t._v(" "),s("li",[t._v("响应对象以一个响应状态行开始(协议版本 + 状态码(status code) + 状态描述)；")]),t._v(" "),s("li",[t._v("短链接，每一个请求建立一个TCP连接，请求完成后立马断开连接。这会导致连接无法复用，每次发送请求都需要建立连接完成后释放，网络利用率很低；")]),t._v(" "),s("li",[t._v("队头阻塞，下一个请求 必须在前一个请求响应到达后才能开始发送。如果前一个阻塞，后面的请求也会被阻塞。")])]),t._v(" "),s("h4",{attrs:{id:"http-1-0的请求例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0的请求例子"}},[t._v("#")]),t._v(" HTTP/1.0的请求例子：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("GET / HTTP/1.0   \nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)\nAccept: */*\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h4",{attrs:{id:"http-1-0的响应例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0的响应例子"}},[t._v("#")]),t._v(" HTTP/1.0的响应例子：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("HTTP/1.0 200 OK  \nContent-Type: text/plain  \nContent-Length: 137582  \nExpires: Thu, 05 Dec 1997 16:00:00 GMT  \nLast-Modified: Wed, 5 August 1996 15:55:28 GMT  \nServer: Apache 0.84  \n\n<html>\n  <body>Hello World</body>\n</html>\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("h3",{attrs:{id:"http-1-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1"}},[t._v("#")]),t._v(" HTTP/1.1")]),t._v(" "),s("h4",{attrs:{id:"_1997年1月-http-1-1版本发布-进一步完善了http协议-目前很多的互联网项目都是基于http1-1再向外提供服务。这一版本的主要功能提升有"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1997年1月-http-1-1版本发布-进一步完善了http协议-目前很多的互联网项目都是基于http1-1再向外提供服务。这一版本的主要功能提升有"}},[t._v("#")]),t._v(" 1997年1月，HTTP/1.1版本发布，进一步完善了HTTP协议，目前很多的互联网项目都是基于HTTP1.1再向外提供服务。这一版本的主要功能提升有：")]),t._v(" "),s("p",[t._v("1.长连接，引入了在HTTP/1.0中游览器为解决短链接实现的Connection字段功能，目的是允许HTTP设备在事情处理结束之后仍然保持TCP连接，以便未来的HTTP请求重用现在的连接，这个功能是默认的。客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。不过，规范的做法是，客户端在最后一个请求时，发送Connecition：close，明确要求服务器关闭TCP连接。")]),t._v(" "),s("p",[t._v("2.管道机制，HTTP/1.0中，在一个TCP连接里需要等待上一个请求的响应返回后才可以发送下一个请求造成了队头阻塞，HTTP/1.1中可以“并行”发送多个请求给服务端，而不需要等待。但实际上服务端的响应仍然是按照顺序的，比如，客户端先请求了html文件然后请求了一个css文件，服务端接收到后，哪怕css文件资源已经处理完毕，仍然会先返回html文件再返回css文件，这种“解决”是把阻塞转移到了服务端。不过游览器厂商采取了一种做法，就是同时创建多个TCP连接，对于同一个域名，大多数游览器允许同时建立6个持久连接。通过这种方式，就可以并行处理多个请求了。")]),t._v(" "),s("p",[t._v("3.分块传输编码，对于一些很耗时的动态操作来说，服务器要等到完成所有操作再发送数据的效率并不高。更好的是使用“流模式”产生一块发送一块。只要请求或回应的头信息有Transfer-Encoding字段，就表明回应将由数量未定的数据块组成。每个非空的数据块之前，会有一个16进制的数值，表示这个块的长度。最后是一个大小为0的块，就表示本次回应的数据发送完了。这在实体长度未知时特别有用(比如由数据库动态产生的数据)。")]),t._v(" "),s("p",[t._v("4.字节范围请求，HTTP1.1支持传送内容的一部分。比如，当客户端已经有内容的一部分，为了节省带宽，可以只向服务器请求一部分。该功能通过再请求消息中引入了range头信息来实现，它允许只请求资源的某个部分。在响应消息中Content-Range头域声明了返回的这部分对象的偏移值和长度。这在处理大型文件上传下载或者因为网络原因造成中断，继续上传下载的场景十分有用。")]),t._v(" "),s("p",[t._v("5.缓存处理，当游览器请求资源时，先看是否有缓存的资源，如果有缓存，直接取，不会再发请求，如果没有缓存，则发送请求。通过设置字段Cache-Control来控制缓存。")]),t._v(" "),s("p",[t._v("6.请求和响应都增加Host头信息，因为在HTTP/1.0中默认每台服务器 都有唯一的IP地址，因此，请求消息中的URL并没有传递主机名。但后来，一台物理主机上可能有多个虚拟主机，它们共享一个IP地址，因此，Host信息就比较重要了。")]),t._v(" "),s("p",[t._v("7.新增了一些Request method， HTTP1.1增加了OPTIONS、 PUT、 DELETE、 TRACE、CONNECT方法。")]),t._v(" "),s("h3",{attrs:{id:"http协议格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http协议格式"}},[t._v("#")]),t._v(" HTTP协议格式")]),t._v(" "),s("h4",{attrs:{id:"http协议经过版本的变化-它的基本格式如下图所示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http协议经过版本的变化-它的基本格式如下图所示"}},[t._v("#")]),t._v(" HTTP协议经过版本的变化，它的基本格式如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(546),alt:"HTTP-structure"}})]),t._v(" "),s("h4",{attrs:{id:"我们使用curl命令来请求一个服务器-查看一个示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我们使用curl命令来请求一个服务器-查看一个示例"}},[t._v("#")]),t._v(" 我们使用curl命令来请求一个服务器，查看一个示例：")]),t._v(" "),s("blockquote",[s("p",[t._v('curl -X POST -d "yeah" -s -v -H "name: haha" -- "https://www.baidu.com/a"')])]),t._v(" "),s("h4",{attrs:{id:"这一段的作用就是请求-https-www-baidu-com-a-这个地址-然后加入一个请求头-name-haha-发送-yeah-这段数据。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#这一段的作用就是请求-https-www-baidu-com-a-这个地址-然后加入一个请求头-name-haha-发送-yeah-这段数据。"}},[t._v("#")]),t._v(" 这一段的作用就是请求 https://www.baidu.com/a 这个地址，然后加入一个请求头 name: haha， 发送“yeah”这段数据。")]),t._v(" "),s("h4",{attrs:{id:"接下来从拿到的请求报文和响应报文结果来进行介绍。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接下来从拿到的请求报文和响应报文结果来进行介绍。"}},[t._v("#")]),t._v(" 接下来从拿到的请求报文和响应报文结果来进行介绍。")]),t._v(" "),s("p",[s("strong",[t._v("请求报文")])]),t._v(" "),s("h4",{attrs:{id:"使用刚才的指令-可以拿到这样的请求报文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用刚才的指令-可以拿到这样的请求报文"}},[t._v("#")]),t._v(" 使用刚才的指令，可以拿到这样的请求报文：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("POST /a HTTP/1.1\nHost: www.baidu.com\nUser-Agent: curl/7.54.0\nAccept: */*\nname: haha\nContent-Length: 4\nContent-Type: application/x-www-form-urlencoded\n\nupload completely sent off: 4 out of 4 bytes\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("h4",{attrs:{id:"http的请求报文由三个东西组成-请求行-请求头和请求体。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http的请求报文由三个东西组成-请求行-请求头和请求体。"}},[t._v("#")]),t._v(" HTTP的请求报文由三个东西组成，请求行，请求头和请求体。")]),t._v(" "),s("p",[t._v("1.请求行有三个部分，请求方法，请求路径和请求的协议及版本。如上例子的第一行。"),s("br"),t._v("\n2.请求头紧随在请求行之后，是由若干行组成，每行用冒号分隔名称和值。"),s("br"),t._v("\n3.请求体在头之后，以一个空行进行分隔，可能包含文件或者表单数据。")]),t._v(" "),s("h4",{attrs:{id:"接下来我们来认识一下他们的具体作用。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接下来我们来认识一下他们的具体作用。"}},[t._v("#")]),t._v(" 接下来我们来认识一下他们的具体作用。")]),t._v(" "),s("p",[s("strong",[t._v("请求方法")])]),t._v(" "),s("h4",{attrs:{id:"请求方法的作用是表示希望执行的操作类型-http-1-1已经支持很多种请求方法-主要有下面几种"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求方法的作用是表示希望执行的操作类型-http-1-1已经支持很多种请求方法-主要有下面几种"}},[t._v("#")]),t._v(" 请求方法的作用是表示希望执行的操作类型，HTTP/1.1已经支持很多种请求方法，主要有下面几种：")]),t._v(" "),s("table",{staticStyle:{"text-align":"center"}},[s("thead",[s("tr",[s("td",[t._v("\n        请求方法名称\n      ")]),t._v(" "),s("td",[t._v("\n        请求方法功能\n      ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("\n        GET\n      ")]),t._v(" "),s("td",[t._v("\n        请求指定的页面信息，并返回实体主体。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        POST\n      ")]),t._v(" "),s("td",[t._v("\n        向指定资源提交数据进行处理请求(例如提交表单或者上传文件)。数据被包含在请求体中。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        HEAD\n      ")]),t._v(" "),s("td",[t._v("\n        类似与GET请求，只不过返回的响应中没有具体的内容，用于获取响应头。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        PUT\n      ")]),t._v(" "),s("td",[t._v("\n        从客户端向服务器传送的数据取代指定的文档内容。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        DELETE\n      ")]),t._v(" "),s("td",[t._v("\n        请求服务器删除指定的页面(资源)。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        CONNECT\n      ")]),t._v(" "),s("td",[t._v("\n        将服务器作为代理访问其它页面。  \n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        OPTIONS\n      ")]),t._v(" "),s("td",[t._v("\n        允许客户端查看服务器的性能。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        TRACE\n      ")]),t._v(" "),s("td",[t._v("\n        回显服务器收到的请求，主要用于测试或诊断。 \n      ")])])])]),t._v(" "),s("h4",{attrs:{id:"在实际开发中-get和post使用的最频繁-它们俩的区别-在这里就不多说了-在理解了游览器的限制和http协议之后自然就能分析出它们的区别。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在实际开发中-get和post使用的最频繁-它们俩的区别-在这里就不多说了-在理解了游览器的限制和http协议之后自然就能分析出它们的区别。"}},[t._v("#")]),t._v(" 在实际开发中，GET和POST使用的最频繁，它们俩的区别，在这里就不多说了，在理解了游览器的限制和HTTP协议之后自然就能分析出它们的区别。")]),t._v(" "),s("p",[s("strong",[t._v("请求头")])]),t._v(" "),s("h4",{attrs:{id:"请求头实际上就是一行行键值对-它实际上也是一堆数据-在http规范中-规定了一些特殊的http头-我们现在就来了解一些常用的请求头。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求头实际上就是一行行键值对-它实际上也是一堆数据-在http规范中-规定了一些特殊的http头-我们现在就来了解一些常用的请求头。"}},[t._v("#")]),t._v(" 请求头实际上就是一行行键值对，它实际上也是一堆数据，在HTTP规范中，规定了一些特殊的HTTP头，我们现在就来了解一些常用的请求头。")]),t._v(" "),s("table",{staticStyle:{"text-align":"center"}},[s("thead",[s("tr",[s("td",[t._v("\n        Key值\n      ")]),t._v(" "),s("td",[t._v("\n        功能\n      ")]),t._v(" "),s("td",[t._v("\n        示例\n      ")]),t._v(" "),s("td",[t._v("\n        说明\n      ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("\n        Accept\n      ")]),t._v(" "),s("td",[t._v("\n        通知服务端，客户端可以处理的内容类型。\n      ")]),t._v(" "),s("td",[t._v("\n        Accept：text/html\n      ")]),t._v(" "),s("td",[t._v("\n        客户端希望接受的数据类型是html类型。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Accept-Encoding\n      ")]),t._v(" "),s("td",[t._v("\n        通知服务端，客户端可以理解的内容编码方式。\n      ")]),t._v(" "),s("td",[t._v("\n        Accept-Encoding：gzip\n      ")]),t._v(" "),s("td",[t._v("\n        表示采用LZ777算法，以及32位CRC校验的编码方式。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Accept-Language\n      ")]),t._v(" "),s("td",[t._v("\n        声明游览器端接受的语言，用于服务器端判断多语言。\n      ")]),t._v(" "),s("td",[t._v("\n        Accept-Language：*\n      ")]),t._v(" "),s("td",[t._v("\n        任何语言都支持。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Cache-Control\n      ")]),t._v(" "),s("td",[t._v("\n        控制缓存的时效性。\n      ")]),t._v(" "),s("td",[t._v("\n        Cache-Control：no-cache\n      ")]),t._v(" "),s("td",[t._v("\n        服务端对应请求返回的响应内容不会在客户端缓存。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Connection\n      ")]),t._v(" "),s("td",[t._v("\n        决定当前的事务完成后，是否会关闭网络连接。\n      ")]),t._v(" "),s("td",[t._v("\n        Connection: keep-alive\n      ")]),t._v(" "),s("td",[t._v("\n        网络连接就是持久，可复用的，不会关闭。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Host\n      ")]),t._v(" "),s("td",[t._v("\n        HTTP访问的服务器域名，以及可选的TCP端口号。\n      ")]),t._v(" "),s("td",[t._v("\n        Host: www.baidu.com\n      ")]),t._v(" "),s("td",[t._v("\n        访问80端口的www.baidu.com\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        If-Modified-Since\n      ")]),t._v(" "),s("td",[t._v("\n        上次访问记录的更改时间，如果服务器认为没有发生修改，则为304。只可以用在GET或HEAD请求中。\n      ")]),t._v(" "),s("td",[t._v("\n        if-modified-since: Wed, 25 Dec 2019 15:25:31 GMT\n      ")]),t._v(" "),s("td",[t._v("\n        最后修改是2019年12月25日23:25:31星期三，下次访问如果不是这个时间则200重新获取，否则读取缓存。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        If-None-Match\n      ")]),t._v(" "),s("td",[t._v("\n        再次访问页面时，携带页面的ETag与服务端的做比较，为改变返回304。\n      ")]),t._v(" "),s("td",[t._v("\n        If-None-Match: “5e037f6b-8c8c”\n      ")]),t._v(" "),s("td",[t._v("\n        请求页面的ETag为：“5e037f6b-8c8c”\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        User-Agent\n      ")]),t._v(" "),s("td",[t._v("\n        客户端的标识，包含了应用类型、操作系统、软件开发商以及版本号。\n      ")]),t._v(" "),s("td",[t._v("\n        User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36\n      ")]),t._v(" "),s("td",[t._v("\n        系统，内核，浏览器版本······\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Cookie\n      ")]),t._v(" "),s("td",[t._v("\n        客户端存储的cookie字符串。\n      ")]),t._v(" "),s("td",[t._v("\n        Cookie: Version: 1; Token: C9834F8382E23B;\n      ")]),t._v(" "),s("td",[t._v("\n        传递了Version和Token两个cookie值。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Referer\n      ")]),t._v(" "),s("td",[t._v("\n        当前页面是通过此来源页面里的链接进入的。\n      ")]),t._v(" "),s("td",[t._v("\n        Cookie: Version: 1; Token: C9834F8382E23B;\n      ")]),t._v(" "),s("td",[t._v("\n        传递了Version和Token两个cookie值。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Content-Type\n      ")]),t._v(" "),s("td",[t._v("\n        在请求中(如POST或PUT)，客户端告诉服务器实际发送的数据类型。\n      ")]),t._v(" "),s("td",[t._v("\n        Content-Type: application/x-www-form-urlencoded\n      ")]),t._v(" "),s("td",[t._v("\n        数据为默认的键值对。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Content-Length\n      ")]),t._v(" "),s("td",[t._v("\n        表示发送的请求体大小。\n      ")]),t._v(" "),s("td",[t._v("\n        Content-Length: 10\n      ")]),t._v(" "),s("td",[t._v("\n        发送的请求体长度是10。\n      ")])])])]),t._v(" "),s("h4",{attrs:{id:"常见的请求头总结也就如上了-可以对比看一下示例的请求头部分是否每一个都可以理解了-详细的请求头还是去看看标准吧。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的请求头总结也就如上了-可以对比看一下示例的请求头部分是否每一个都可以理解了-详细的请求头还是去看看标准吧。"}},[t._v("#")]),t._v(" 常见的请求头总结也就如上了，可以对比看一下示例的请求头部分是否每一个都可以理解了，详细的请求头还是去看看标准吧。")]),t._v(" "),s("p",[s("strong",[t._v("请求体")])]),t._v(" "),s("h4",{attrs:{id:"请求体也就是请求的数据-最终会通过http请求发送给服务端的数据-一般都是使用post请求方式-但是并没有明确的要求数据必须使用什么编码方式。实际上-开发者可以自己决定请求体是什么格式-只要最终发送的http请求满足了报文的要求即可。但是-数据到了服务端-对方要能够成功解析才有意义。服务端通常是根据content-type字段来获知请求体是什么编码方式-再对主体进行解析。所以说到post提交数据方式-包含了content-type和消息主体编码方式两部分。一些常见的格式有"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求体也就是请求的数据-最终会通过http请求发送给服务端的数据-一般都是使用post请求方式-但是并没有明确的要求数据必须使用什么编码方式。实际上-开发者可以自己决定请求体是什么格式-只要最终发送的http请求满足了报文的要求即可。但是-数据到了服务端-对方要能够成功解析才有意义。服务端通常是根据content-type字段来获知请求体是什么编码方式-再对主体进行解析。所以说到post提交数据方式-包含了content-type和消息主体编码方式两部分。一些常见的格式有"}},[t._v("#")]),t._v(" 请求体也就是请求的数据，最终会通过HTTP请求发送给服务端的数据，一般都是使用POST请求方式，但是并没有明确的要求数据必须使用什么编码方式。实际上，开发者可以自己决定请求体是什么格式，只要最终发送的http请求满足了报文的要求即可。但是，数据到了服务端，对方要能够成功解析才有意义。服务端通常是根据Content-Type字段来获知请求体是什么编码方式，再对主体进行解析。所以说到POST提交数据方式，包含了Content-Type和消息主体编码方式两部分。一些常见的格式有：")]),t._v(" "),s("p",[t._v("1.application/x-www-form-urlencoded"),s("br"),t._v("\nform标签再 不设置enctype属性的情况下，默认就是这个数据类型。请求类似如下(省略掉了其它信息)：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("POST /a HTTP/1.1  \nContent-Type: application/x-www-form-urlencoded;charset=utf-8  \n\nname=haha&age=18\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("Content-Type 类 型 为application/x-www-form-urlencoded，请求体的数据以 key=value&key=value的格式进行编码。"),s("br"),t._v("\n2.multipart/form-data"),s("br"),t._v("\n当我们使用表单上传文件的时候，必须设置form标签的enctype等于multipart/form-data。该格式还会生成一个boundary字符串来分割请求头与请求体，具体的是以一个boundary=${boundary}来进行分割，请求类似如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("POST /a HTTP/1.1\nContent-Type: multipart/form-data; boundary=asdasbdbakjb128egdbjahsb123io\n\n--asdasbdbakjb128egdbjahsb123io\ncontent...\n--asdasbdbakjb128egdbjahsb123io--\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("并且使用--boundary来分割请求头和请求体中的多个字段结构，--boundart--用来结束请求体。"),s("br"),t._v("\n3.application/json"),s("br"),t._v("\n这个值如果作为响应头的Content-Type是很常见的，但实际上，作为请求头也是可以的，它表示请求体是序列化的JSON字符串。比如：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('POST /a HTTP/1.1\nContent-Type: application/x-www-form-urlencoded;charset=utf-8\n\n{"name": "ygm", "age": 18}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("这种方式对于一些比较复杂的数据结构，或者对于一些抓包工具的数据展示有很好的效果。")]),t._v(" "),s("p",[t._v("4.text/xml"),s("br"),t._v("\n表示当前请求体是xml格式，如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('POST /a HTTP/1.1\nContent-Type: text/xml\n\n<?xml version="1.0"?>\n<person>\n  <name>ygm</name>\n  <age>18</age>\n</person>\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h3",{attrs:{id:"响应报文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应报文"}},[t._v("#")]),t._v(" 响应报文")]),t._v(" "),s("h4",{attrs:{id:"响应报文按照前面使用curl命令发送请求得到的响应报文如下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应报文按照前面使用curl命令发送请求得到的响应报文如下"}},[t._v("#")]),t._v(" 响应报文按照前面使用curl命令发送请求得到的响应报文如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('HTTP/1.1 302 Found\nCache-Control: max-age=86400\nConnection: Keep-Alive\nContent-Length: 222\nContent-Type: text/html; charset=iso-8859-1\nDate: Wed, 25 Dec 2019 10:48:09 GMT\nExpires: Thu, 26 Dec 2019 10:48:09 GMT\nLocation: https://www.baidu.com/search/error.html\nServer: Apache\n\n<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">\n<html><head>\n...\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("h4",{attrs:{id:"http的响应报文也分为三个部分-相应行、响应头、响应体。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http的响应报文也分为三个部分-相应行、响应头、响应体。"}},[t._v("#")]),t._v(" HTTP的响应报文也分为三个部分，相应行、响应头、响应体。")]),t._v(" "),s("p",[t._v("1.响应行：分为三个部分，协议版本，状态码和状态文本。"),s("br"),t._v("\n2.响应头紧随在响应行之后，是由若干行组成，每行用冒号分割名称和值。"),s("br"),t._v("\n3.响应体在头之后，以一个空行进行分割，可能是html或者Json等数据。")]),t._v(" "),s("h4",{attrs:{id:"接下来认识一下响应报文中的几个重要点。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接下来认识一下响应报文中的几个重要点。"}},[t._v("#")]),t._v(" 接下来认识一下响应报文中的几个重要点。")]),t._v(" "),s("p",[s("strong",[t._v("状态码和状态文本")])]),t._v(" "),s("h4",{attrs:{id:"状态码是一个用来表示本次http请求响应状态的3位数的数字代码。常见的状态码和状态文本如下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态码是一个用来表示本次http请求响应状态的3位数的数字代码。常见的状态码和状态文本如下"}},[t._v("#")]),t._v(" 状态码是一个用来表示本次http请求响应状态的3位数的数字代码。常见的状态码和状态文本如下：")]),t._v(" "),s("table",{staticStyle:{"text-align":"center"}},[s("thead",[s("tr",[s("td",[t._v("\n        状态码\n      ")]),t._v(" "),s("td",[t._v("\n        状态文本\n      ")]),t._v(" "),s("td",[t._v("\n        说明\n      ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("\n        100\n      ")]),t._v(" "),s("td",[t._v("\n        Continue\n      ")]),t._v(" "),s("td",[t._v("\n        客户端必须继续发送请求\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        200\n      ")]),t._v(" "),s("td",[t._v("\n        OK\n      ")]),t._v(" "),s("td",[t._v("\n        请求成功\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        204\n      ")]),t._v(" "),s("td",[t._v("\n        Not Content\n      ")]),t._v(" "),s("td",[t._v("\n        请求收到，但返回信息为空\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        301\n      ")]),t._v(" "),s("td",[t._v("\n        Moved Permanently\n      ")]),t._v(" "),s("td",[t._v("\n        永久重定向，被请求的资源已永久移动到新位置\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        302\n      ")]),t._v(" "),s("td",[t._v("\n        Found\n      ")]),t._v(" "),s("td",[t._v("\n        临时重定向，请求的资源现在临时从不同的URL响应请求\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        304\n      ")]),t._v(" "),s("td",[t._v("\n        Not Modified\n      ")]),t._v(" "),s("td",[t._v("\n        客户端已经执行get，但文件未变化\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        403\n      ")]),t._v(" "),s("td",[t._v("\n        Forbidden\n      ")]),t._v(" "),s("td",[t._v("\n        请求不允许(由于服务器上文件或目录的权限设置导致资源不可用)\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        404\n      ")]),t._v(" "),s("td",[t._v("\n        Not Found\n      ")]),t._v(" "),s("td",[t._v("\n        没有发现文件，查询或URL没有找到指定资源\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        405\n      ")]),t._v(" "),s("td",[t._v("\n        Method Not Allowed\n      ")]),t._v(" "),s("td",[t._v("\n        请求行中的请求方法不允许\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        414\n      ")]),t._v(" "),s("td",[t._v("\n        Request-URL Too Long\n      ")]),t._v(" "),s("td",[t._v("\n        请求资源的URL长度大于服务器允许的长度\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        500\n      ")]),t._v(" "),s("td",[t._v("\n        Internal Server Error\n      ")]),t._v(" "),s("td",[t._v("\n        服务器产生内部错误\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        503\n      ")]),t._v(" "),s("td",[t._v("\n        Service Unavaliable\n      ")]),t._v(" "),s("td",[t._v("\n        服务器过载或暂停维修\n      ")])])])]),t._v(" "),s("h4",{attrs:{id:"总结这些状态码的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结这些状态码的特点"}},[t._v("#")]),t._v(" 总结这些状态码的特点:")]),t._v(" "),s("ul",[s("li",[t._v("1XX：状态码一般被游览器HTTP库处理掉了，用户一般不知晓，用于告知客户端，服务器接到请求，请继续。")]),t._v(" "),s("li",[t._v("2XX：成功，操作被成功接收并处理。")]),t._v(" "),s("li",[t._v("3XX：重定向，请求目标发生变化，需要客户端进一步处理。")]),t._v(" "),s("li",[t._v("4XX：客户端请求错误，请求包含语法错误或无法完成请求。")]),t._v(" "),s("li",[t._v("5XX：服务器错误，服务器在处理请求的过程中发生了错误。")])]),t._v(" "),s("p",[s("strong",[t._v("响应头")])]),t._v(" "),s("h4",{attrs:{id:"和请求头类似-在响应报文中-也有一些基础信息-以键值对表示-下面也列举一些常见的响应头"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#和请求头类似-在响应报文中-也有一些基础信息-以键值对表示-下面也列举一些常见的响应头"}},[t._v("#")]),t._v(" 和请求头类似，在响应报文中，也有一些基础信息，以键值对表示，下面也列举一些常见的响应头：")]),t._v(" "),s("table",{staticStyle:{"text-align":"center"}},[s("thead",[s("tr",[s("td",[t._v("\n        Key值\n      ")]),t._v(" "),s("td",[t._v("\n        功能\n      ")]),t._v(" "),s("td",[t._v("\n        示例\n      ")]),t._v(" "),s("td",[t._v("\n        说明\n      ")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("\n        Cache-Control\n      ")]),t._v(" "),s("td",[t._v("\n        缓存控制，通知客户端如何控制响应内容的缓存\n      ")]),t._v(" "),s("td",[t._v("\n        Cache-Control：max-age=3600\n      ")]),t._v(" "),s("td",[t._v("\n        让客户端对响应内容缓存3600秒\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Connection\n      ")]),t._v(" "),s("td",[t._v("\n        决定当前的事务完成后，是否会关闭网络连接\n      ")]),t._v(" "),s("td",[t._v("\n        Connection: Keep-alive\n      ")]),t._v(" "),s("td",[t._v("\n        网络连接就是持久，可复用的，不会关闭\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Content-Encoding\n      ")]),t._v(" "),s("td",[t._v("\n        内容编码方式，对应请求头Accept-Encoding\n      ")]),t._v(" "),s("td",[t._v("\n        Content-Encoding:gzip\n      ")]),t._v(" "),s("td",[t._v("\n        采用LZ777算法，以及32位CRC校验的编码方式。\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Content-Length\n      ")]),t._v(" "),s("td",[t._v("\n        内容长度，有利于游览器判断内容是否已经结束\n      ")]),t._v(" "),s("td",[t._v("\n        Content-Length: 10\n      ")]),t._v(" "),s("td",[t._v("\n        本次数据内容长度是10个字符串，后面的是下一个回应\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Content-Type\n      ")]),t._v(" "),s("td",[t._v("\n        内容类型\n      ")]),t._v(" "),s("td",[t._v("\n        Content-Type: text/html\n      ")]),t._v(" "),s("td",[t._v("\n        数据类型是html\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Date\n      ")]),t._v(" "),s("td",[t._v("\n        当前服务器的日期\n      ")]),t._v(" "),s("td",[t._v("\n        Date: Wed, 25 Dec 2019 10:48:09 GMT\n      ")]),t._v(" "),s("td",[t._v("\n        服务器日期是····\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        ETag\n      ")]),t._v(" "),s("td",[t._v("\n        资源的标识符，用于判断下次请求是否需要到服务端取回最新资源\n      ")]),t._v(" "),s("td",[t._v('\n        ETag: "33a64dff89d4"\n      ')]),t._v(" "),s("td",[t._v("\n        告知客户端当前资源的标识符是····\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Expires\n      ")]),t._v(" "),s("td",[t._v("\n        过期时间，用于判断下次请求是否需要重新到服务端获取最新资源\n      ")]),t._v(" "),s("td",[t._v("\n        Expires: Wed, 25 Dec 2019 10:48:09 GMT\n      ")]),t._v(" "),s("td",[t._v("\n        在这个时间之后响应过期\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Keep-Alive\n      ")]),t._v(" "),s("td",[t._v("\n        表示连接的状态，可以用来设置超时时长和最大请求数\n      ")]),t._v(" "),s("td",[t._v("\n        Keep-Alive: timeout=5, max=1000\n      ")]),t._v(" "),s("td",[t._v("\n        空闲连接至少打开5秒，限制连接关闭前最多1000次请求\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Last-Modified\n      ")]),t._v(" "),s("td",[t._v("\n        当前资源最后修改的时间\n      ")]),t._v(" "),s("td",[t._v("\n        Last-Modified: Wed, 25 Dec 2019 10:48:09 GMT\n      ")]),t._v(" "),s("td",[t._v("\n        最后修改时间是···\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Server\n      ")]),t._v(" "),s("td",[t._v("\n        服务端软件的类型\n      ")]),t._v(" "),s("td",[t._v("\n        Server: Apache\n      ")]),t._v(" "),s("td",[t._v("\n        服务端软件类型是Apache\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Set-Cookie\n      ")]),t._v(" "),s("td",[t._v("\n        设置客户端cookie，可以存在多个\n      ")]),t._v(" "),s("td",[t._v("\n        Set-Cookie: sessionid=38afes7a8; HttpOnly; Path=/\t\n      ")]),t._v(" "),s("td",[t._v("\n        设置了会话cookie\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Via\n      ")]),t._v(" "),s("td",[t._v("\n        服务端请求链路，追踪消息转发情况\n      ")]),t._v(" "),s("td",[t._v("\n        Via: 1.0 fred, 1.1 p.example.net\n      ")]),t._v(" "),s("td",[t._v("\n        累积的链路信息\n      ")])]),t._v(" "),s("tr",[s("td",[t._v("\n        Location\n      ")]),t._v(" "),s("td",[t._v("\n        指定需要将页面重新定向至的地址\n      ")]),t._v(" "),s("td",[t._v("\n        Location: http://www.yuguomin.com\n      ")]),t._v(" "),s("td",[t._v("\n        告知客户端，请求这个地址\n      ")])])])]),t._v(" "),s("p",[s("strong",[t._v("响应体")])]),t._v(" "),s("h4",{attrs:{id:"响应体一般就是网页的正文内容或者json数据-有的会在响应头中会用content-length来明确响应体的长度-便于游览器接收-对于大数据量的正文信息-也会使用chunked的编码方式。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应体一般就是网页的正文内容或者json数据-有的会在响应头中会用content-length来明确响应体的长度-便于游览器接收-对于大数据量的正文信息-也会使用chunked的编码方式。"}},[t._v("#")]),t._v(" 响应体一般就是网页的正文内容或者Json数据，有的会在响应头中会用Content-Length来明确响应体的长度，便于游览器接收，对于大数据量的正文信息，也会使用chunked的编码方式。")]),t._v(" "),s("h4",{attrs:{id:"http的整体结构就是这些-发展到1-1版本-它仍然有一些缺陷-比如1-1的管道机制-但实际上是把阻塞转移到服务端-还有明文传输、头信息臃肿。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http的整体结构就是这些-发展到1-1版本-它仍然有一些缺陷-比如1-1的管道机制-但实际上是把阻塞转移到服务端-还有明文传输、头信息臃肿。"}},[t._v("#")]),t._v(" HTTP的整体结构就是这些，发展到1.1版本，它仍然有一些缺陷，比如1.1的管道机制，但实际上是把阻塞转移到服务端，还有明文传输、头信息臃肿。")]),t._v(" "),s("h4",{attrs:{id:"为了解决这些问题-出现了http-2-0和https。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为了解决这些问题-出现了http-2-0和https。"}},[t._v("#")]),t._v(" 为了解决这些问题，出现了HTTP/2.0和HTTPS。")]),t._v(" "),s("h2",{attrs:{id:"http-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[t._v("#")]),t._v(" HTTP/2")]),t._v(" "),s("h4",{attrs:{id:"_2015年-发布了http-2-它是http-1-1的升级版本-下面列举一下它的升级重点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2015年-发布了http-2-它是http-1-1的升级版本-下面列举一下它的升级重点"}},[t._v("#")]),t._v(" 2015年，发布了HTTP/2，它是HTTP/1.1的升级版本，下面列举一下它的升级重点：")]),t._v(" "),s("p",[t._v("1.二进制分帧"),s("br"),t._v("\nHTTp/1.1的头信息肯定是文本，数据体可以是文本，也可以是二进制。HTTP/2.0在不改变原来版本语义的情况下，新增了二进制分帧层，将所有传输的信息分割成更小的消息和帧，并对它们采取二进制格式的编码使体积更小。在HTTP1.1中的首部信息(除了请求体)会被封装到Headers frame，而请求体会被放入到DATA frame，除此之外还有八种不同的类型的帧。"),s("br"),t._v("\n2.多路复用"),s("br"),t._v("\nHTTP/2的传输是基于二进制帧的，同域名下所有的请求都是在一个TCP连接上进行的，而连接上承载了很多双向流通的流，每一个流都有一个独一无二的标识和优先级，流就是二进制帧组成的。二进制帧的头部信息会标识自己属于哪一个流，所以这些帧是可以交错传输的。然后在接收端通过帧的头信息流标识符组装成完整的数据。这样就解决了之前的“队头阻塞问题”。并且优先级越高，服务器会越早回应。"),s("br"),t._v("\n3.头信息压缩"),s("br"),t._v("\nHTTP协议使无状态的，每次请求都需要带上所有的信息，其中很多信息使重复的。这样会浪费带宽也影响速度。因此，HTTP/2做了优化，采用了头信息压缩机制。一方面，采用gzip或compress压缩后再发送；另一方面，客户端和 服务器同时维护一张头信息表，所有字段都将存入表里。并生成索引号，以后就不发送同样字段了，只发送索引号，这样就提高了速度。"),s("br"),t._v("\n4.服务器推送"),s("br"),t._v("\n服务器可以为客户端的请求做多个响应，不再是一对一。也就是说，除了原始请求的对应资源，服务端还可以推送一些客户端可能需要的资源而不需要客户端一一请求。这样可以用服务端控制一些资源提前加载，提高响应速度。")]),t._v(" "),s("h4",{attrs:{id:"http-2在性能优化上的提升和为之后准备更高级的功能打下了很好的基础。从一定程度上-减少了开发人员很多的工作内容。但是-http协议还有一个问题-安全。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-2在性能优化上的提升和为之后准备更高级的功能打下了很好的基础。从一定程度上-减少了开发人员很多的工作内容。但是-http协议还有一个问题-安全。"}},[t._v("#")]),t._v(" HTTP/2在性能优化上的提升和为之后准备更高级的功能打下了很好的基础。从一定程度上，减少了开发人员很多的工作内容。但是，HTTP协议还有一个问题，安全。")]),t._v(" "),s("h2",{attrs:{id:"https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),s("h4",{attrs:{id:"http协议的安全方面的问题-主要在于它的明文传输和互联网的公开环境造成-主要涉及三个点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http协议的安全方面的问题-主要在于它的明文传输和互联网的公开环境造成-主要涉及三个点"}},[t._v("#")]),t._v(" HTTP协议的安全方面的问题，主要在于它的明文传输和互联网的公开环境造成，主要涉及三个点：")]),t._v(" "),s("p",[t._v("1.无法确定对端的身份，就是无法确定我要快递的东西真的是本人签收，可能存在冒充。"),s("br"),t._v("\n2.传输的数据可能被窃听，我发出去的快递，在过程中别人可以看到里面的内容。"),s("br"),t._v("\n3.传输的数据可能被篡改，我发出的快递，在传输过程中被人更换了其中的内容。")]),t._v(" "),s("h4",{attrs:{id:"鉴于此-出现了https来解决这些问题-本篇内容对https的介绍主要只涉及到它的大概过程。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#鉴于此-出现了https来解决这些问题-本篇内容对https的介绍主要只涉及到它的大概过程。"}},[t._v("#")]),t._v(" 鉴于此，出现了HTTPS来解决这些问题，本篇内容对HTTPS的介绍主要只涉及到它的大概过程。")]),t._v(" "),s("h4",{attrs:{id:"https不是应用层的一种新协议-它是采用ssl-securesocket-layer-或tls-transport-layer-security-协议作为通信接口的http协议-这个通信接口可以用来加密-构建于tcp协议之上。他们利用对称加密的方式加密通信信息-利用非对称加密加密对称加密的密钥-再利用证书保证非对称加密的公开密钥的正确性。这样-在保持了http设计思想的同时-也保证了传输的安全性-以及最大程度的节约了加密解密的性能。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https不是应用层的一种新协议-它是采用ssl-securesocket-layer-或tls-transport-layer-security-协议作为通信接口的http协议-这个通信接口可以用来加密-构建于tcp协议之上。他们利用对称加密的方式加密通信信息-利用非对称加密加密对称加密的密钥-再利用证书保证非对称加密的公开密钥的正确性。这样-在保持了http设计思想的同时-也保证了传输的安全性-以及最大程度的节约了加密解密的性能。"}},[t._v("#")]),t._v(" HTTPS不是应用层的一种新协议，它是采用SSL(SecureSocket Layer)或TLS(Transport Layer Security)协议作为通信接口的HTTP协议，这个通信接口可以用来加密，构建于TCP协议之上。他们利用对称加密的方式加密通信信息，利用非对称加密加密对称加密的密钥，再利用证书保证非对称加密的公开密钥的正确性。这样，在保持了HTTP设计思想的同时，也保证了传输的安全性，以及最大程度的节约了加密解密的性能。")]),t._v(" "),s("h2",{attrs:{id:"webscoket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webscoket"}},[t._v("#")]),t._v(" WebScoket")]),t._v(" "),s("h4",{attrs:{id:"webscoket协议在2011年成为了国际标准-它的目的就是实现真正的服务端客户端全双工通信-也就是服务端也可以主动发起消息了。这里介绍它的几个特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webscoket协议在2011年成为了国际标准-它的目的就是实现真正的服务端客户端全双工通信-也就是服务端也可以主动发起消息了。这里介绍它的几个特点"}},[t._v("#")]),t._v(" WebScoket协议在2011年成为了国际标准，它的目的就是实现真正的服务端客户端全双工通信，也就是服务端也可以主动发起消息了。这里介绍它的几个特点：")]),t._v(" "),s("p",[t._v("1.建立在TCP协议之上；"),s("br"),t._v("\n2.WebSocket是由http先发起的，端口也是80和443，握手阶段采用HTTP协议，然后再转为WebSocket连接；"),s("br"),t._v("\n3.协议标识符是ws(如果加密，则为wss)，服务器网址就是URL。")]),t._v(" "),s("h4",{attrs:{id:"不同于http-2-0-server-push基于客户端发起请求后-服务端可以主动推送一些相关资源。而是可以完全的主动发起通信。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同于http-2-0-server-push基于客户端发起请求后-服务端可以主动推送一些相关资源。而是可以完全的主动发起通信。"}},[t._v("#")]),t._v(" 不同于HTTP/2.0 Server Push基于客户端发起请求后，服务端可以主动推送一些相关资源。而是可以完全的主动发起通信。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("h4",{attrs:{id:"自己先来理解http协议-做好记录-时常翻阅。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自己先来理解http协议-做好记录-时常翻阅。"}},[t._v("#")]),t._v(" 自己先来理解HTTP协议，做好记录，时常翻阅。")]),t._v(" "),s("h4",{attrs:{id:"参考相关文章链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考相关文章链接"}},[t._v("#")]),t._v(" 参考相关文章链接：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.yuguomin.com/2019/12/25/frontend-network-study/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SuperFish's Blog"),s("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=e.exports}}]);